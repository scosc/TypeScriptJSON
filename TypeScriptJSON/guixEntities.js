var guixEntities;
(function (guixEntities) {
    class UniqueItem {
    }
    guixEntities.UniqueItem = UniqueItem;
    class GuixObject {
    }
    guixEntities.GuixObject = GuixObject;
    class GuixTableColumn {
    }
    guixEntities.GuixTableColumn = GuixTableColumn;
    class GuixTable {
    }
    guixEntities.GuixTable = GuixTable;
    class GuixSection {
    }
    guixEntities.GuixSection = GuixSection;
    (function (ClauseOperand) {
        /// <remarks/>
        ClauseOperand[ClauseOperand["equal"] = 0] = "equal";
        /// <remarks/>
        ClauseOperand[ClauseOperand["notEqual"] = 1] = "notEqual";
        /// <remarks/>
        ClauseOperand[ClauseOperand["less"] = 2] = "less";
        /// <remarks/>
        ClauseOperand[ClauseOperand["lessOrEqual"] = 3] = "lessOrEqual";
        /// <remarks/>
        ClauseOperand[ClauseOperand["greater"] = 4] = "greater";
        /// <remarks/>
        ClauseOperand[ClauseOperand["greaterEqual"] = 5] = "greaterEqual";
    })(guixEntities.ClauseOperand || (guixEntities.ClauseOperand = {}));
    var ClauseOperand = guixEntities.ClauseOperand;
    (function (ClauseLogicalOperand) {
        /// <remarks/>
        ClauseLogicalOperand[ClauseLogicalOperand["and"] = 0] = "and";
        /// <remarks/>
        ClauseLogicalOperand[ClauseLogicalOperand["or"] = 1] = "or";
    })(guixEntities.ClauseLogicalOperand || (guixEntities.ClauseLogicalOperand = {}));
    var ClauseLogicalOperand = guixEntities.ClauseLogicalOperand;
})(guixEntities || (guixEntities = {}));
// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by a tool.
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
//  
//  This source code was auto-generated by xsd, Version=4.0.30319.33440.
//  
var Gemini;
(function (Gemini) {
    class GeminiObject extends Object {
    }
    Gemini.GeminiObject = GeminiObject;
    class SingletonLink extends LinkBase {
    }
    Gemini.SingletonLink = SingletonLink;
    class LinkBase extends GeminiObject {
        constructor() {
            super();
            this.mergeField = false;
            this.linkTelemetriesField = true;
        }
        get Component() {
            return this.componentField;
        }
        set Component(value) {
            this.componentField = value;
        }
        ///  <remarks/>
        get Version() {
            return this.versionField;
        }
        set Version(value) {
            this.versionField = value;
        }
        get Merge() {
            return this.mergeField;
        }
        set Merge(value) {
            this.mergeField = value;
        }
        get LinkTelemetries() {
            return this.linkTelemetriesField;
        }
        set LinkTelemetries(value) {
            this.linkTelemetriesField = value;
        }
    }
    Gemini.LinkBase = LinkBase;
    class Element extends GeminiObject {
    }
    Gemini.Element = Element;
    class MultilineTextOptions extends GeminiObject {
        constructor() {
            super();
            this.linesField = (6);
            this.wrapField = true;
            this.widthFactorField = (2);
        }
        get Lines() {
            return this.linesField;
        }
        set Lines(value) {
            this.linesField = value;
        }
        get Wrap() {
            return this.wrapField;
        }
        set Wrap(value) {
            this.wrapField = value;
        }
        ///  <remarks/>
        get WidthFactor() {
            return this.widthFactorField;
        }
        set WidthFactor(value) {
            this.widthFactorField = value;
        }
    }
    Gemini.MultilineTextOptions = MultilineTextOptions;
    ///  <remarks/>
    class NumericUpDown extends GeminiObject {
        constructor() {
            super();
            this.allowDirectEditField = false;
        }
        ///  <remarks/>
        get Step() {
            return this.stepField;
        }
        set Step(value) {
            this.stepField = value;
        }
        ///  <remarks/>
        get AllowDirectEdit() {
            return this.allowDirectEditField;
        }
        set AllowDirectEdit(value) {
            this.allowDirectEditField = value;
        }
    }
    Gemini.NumericUpDown = NumericUpDown;
    ///  <remarks/>
    class ValueConverterBase extends GeminiObject {
        ///  <remarks/>
        get ConvertOperation() {
            return this.convertOperationField;
        }
        set ConvertOperation(value) {
            this.convertOperationField = value;
        }
        ///  <remarks/>
        get Factor() {
            return this.factorField;
        }
        set Factor(value) {
            this.factorField = value;
        }
        ///  <remarks/>
        get OverrideUnits() {
            return this.overrideUnitsField;
        }
        set OverrideUnits(value) {
            this.overrideUnitsField = value;
        }
        ///  <remarks/>
        get OverrideUnitsSpecified() {
            return this.overrideUnitsFieldSpecified;
        }
        set OverrideUnitsSpecified(value) {
            this.overrideUnitsFieldSpecified = value;
        }
    }
    Gemini.ValueConverterBase = ValueConverterBase;
    ///  <remarks/>
    (function (ConvertOperation) {
        ConvertOperation[ConvertOperation["multiplication"] = 0] = "multiplication";
        ConvertOperation[ConvertOperation["division"] = 1] = "division";
    })(Gemini.ConvertOperation || (Gemini.ConvertOperation = {}));
    var ConvertOperation = Gemini.ConvertOperation;
    ///  <remarks/>
    (function (Units) {
        Units[Units["Empty"] = 0] = "Empty";
        Units[Units["BBsegment"] = 1] = "BBsegment";
        Units[Units["COMMbuff"] = 2] = "COMMbuff";
        Units[Units["MPEGframes"] = 3] = "MPEGframes";
        Units[Units["TS"] = 4] = "TS";
        Units[Units["TSSS"] = 5] = "TSSS";
        Units[Units["Percent"] = 6] = "Percent";
        Units[Units["PCR32"] = 7] = "PCR32";
        Units[Units["Item27MHzticks"] = 8] = "Item27MHzticks";
        Units[Units["EsN0dB"] = 9] = "EsN0dB";
        Units[Units["CN0dB"] = 10] = "CN0dB";
        Units[Units["cm"] = 11] = "cm";
        Units[Units["Km"] = 12] = "Km";
        Units[Units["packets"] = 13] = "packets";
        Units[Units["bursts"] = 14] = "bursts";
        Units[Units["symbols"] = 15] = "symbols";
        Units[Units["Item01dB"] = 16] = "Item01dB";
        Units[Units["Item001dB"] = 17] = "Item001dB";
        Units[Units["dB"] = 18] = "dB";
        Units[Units["Item01dBmHz"] = 19] = "Item01dBmHz";
        Units[Units["dBm"] = 20] = "dBm";
        Units[Units["degrees"] = 21] = "degrees";
        Units[Units["C"] = 22] = "C";
        Units[Units["dBmHz"] = 23] = "dBmHz";
        Units[Units["hours"] = 24] = "hours";
        Units[Units["minutes"] = 25] = "minutes";
        Units[Units["sec"] = 26] = "sec";
        Units[Units["ms"] = 27] = "ms";
        Units[Units["Item10ms"] = 28] = "Item10ms";
        Units[Units["s"] = 29] = "s";
        Units[Units["Hz"] = 30] = "Hz";
        Units[Units["KHz"] = 31] = "KHz";
        Units[Units["MHz"] = 32] = "MHz";
        Units[Units["GHz"] = 33] = "GHz";
        Units[Units["bytes"] = 34] = "bytes";
        Units[Units["KB"] = 35] = "KB";
        Units[Units["MB"] = 36] = "MB";
        Units[Units["GB"] = 37] = "GB";
        Units[Units["bps"] = 38] = "bps";
        Units[Units["Kbps"] = 39] = "Kbps";
        Units[Units["pps"] = 40] = "pps";
        Units[Units["sps"] = 41] = "sps";
        Units[Units["Ksps"] = 42] = "Ksps";
        Units[Units["ppm"] = 43] = "ppm";
        Units[Units["Mbps"] = 44] = "Mbps";
        Units[Units["mA"] = 45] = "mA";
        Units[Units["W"] = 46] = "W";
        Units[Units["mW"] = 47] = "mW";
        Units[Units["V"] = 48] = "V";
    })(Gemini.Units || (Gemini.Units = {}));
    var Units = Gemini.Units;
    ///  <remarks/>
    class ValueConverter extends ValueConverterBase {
    }
    Gemini.ValueConverter = ValueConverter;
    ///  <remarks/>
    class AttachedMibxItem extends GeminiObject {
        ///  <remarks/>
        get Attached() {
            return this.attachedField;
        }
        set Attached(value) {
            this.attachedField = value;
        }
        ///  <remarks/>
        get UID() {
            return this.uIDField;
        }
        set UID(value) {
            this.uIDField = value;
        }
        ///  <remarks/>
        get DisplayName() {
            return this.displayNameField;
        }
        set DisplayName(value) {
            this.displayNameField = value;
        }
    }
    Gemini.AttachedMibxItem = AttachedMibxItem;
    ///  <remarks/>
    class GuixItem extends AttachedMibxItem {
        constructor() {
            super();
            this.columnField = 0;
            this.colspanField = 1;
            this.rowField = 0;
            this.rowspanField = 1;
        }
        ///  <remarks/>
        get Column() {
            return this.columnField;
        }
        set Column(value) {
            this.columnField = value;
        }
        ///  <remarks/>
        get Colspan() {
            return this.colspanField;
        }
        set Colspan(value) {
            this.colspanField = value;
        }
        ///  <remarks/>
        get Row() {
            return this.rowField;
        }
        set Row(value) {
            this.rowField = value;
        }
        ///  <remarks/>
        get Rowspan() {
            return this.rowspanField;
        }
        set Rowspan(value) {
            this.rowspanField = value;
        }
    }
    Gemini.GuixItem = GuixItem;
    ///  <remarks/>
    class ReplacePattern extends GeminiObject {
        ///  <remarks/>
        get KeyValue() {
            return this.keyValueField;
        }
        set KeyValue(value) {
            this.keyValueField = value;
        }
    }
    Gemini.ReplacePattern = ReplacePattern;
    ///  <remarks/>
    class KeyValue extends GeminiObject {
        ///  <remarks/>
        get Key() {
            return this.keyField;
        }
        set Key(value) {
            this.keyField = value;
        }
        ///  <remarks/>
        get Value() {
            return this.valueField;
        }
        set Value(value) {
            this.valueField = value;
        }
    }
    Gemini.KeyValue = KeyValue;
    ///  <remarks/>
    class RangeBase extends GeminiObject {
        ///  <remarks/>
        get UID() {
            return this.uIDField;
        }
        set UID(value) {
            this.uIDField = value;
        }
        ///  <remarks/>
        get Min() {
            return this.minField;
        }
        set Min(value) {
            this.minField = value;
        }
        ///  <remarks/>
        get Max() {
            return this.maxField;
        }
        set Max(value) {
            this.maxField = value;
        }
        ///  <remarks/>
        get MaxSpecified() {
            return this.maxFieldSpecified;
        }
        set MaxSpecified(value) {
            this.maxFieldSpecified = value;
        }
    }
    Gemini.RangeBase = RangeBase;
    ///  <remarks/>
    class EnumBase extends RangeBase {
    }
    Gemini.EnumBase = EnumBase;
    ///  <remarks/>
    class CapabilityClause extends GeminiObject {
        ///  <remarks/>
        get Path() {
            return this.pathField;
        }
        set Path(value) {
            this.pathField = value;
        }
        ///  <remarks/>
        get Level() {
            return this.levelField;
        }
        set Level(value) {
            this.levelField = value;
        }
    }
    Gemini.CapabilityClause = CapabilityClause;
    ///  <remarks/>
    (function (CapabilityLevel) {
        CapabilityLevel[CapabilityLevel["global"] = 0] = "global";
        CapabilityLevel[CapabilityLevel["folder"] = 1] = "folder";
        CapabilityLevel[CapabilityLevel["element"] = 2] = "element";
    })(Gemini.CapabilityLevel || (Gemini.CapabilityLevel = {}));
    var CapabilityLevel = Gemini.CapabilityLevel;
    ///  <remarks/>
    class Dependency extends GeminiObject {
        ///  <remarks/>
        get Condition() {
            return this.conditionField;
        }
        set Condition(value) {
            this.conditionField = value;
        }
    }
    Gemini.Dependency = Dependency;
    ///  <remarks/>
    class Condition extends GeminiObject {
        ///  <remarks/>
        get ClauseGroup() {
            return this.clauseGroupField;
        }
        set ClauseGroup(value) {
            this.clauseGroupField = value;
        }
    }
    Gemini.Condition = Condition;
    ///  <remarks/>
    class ClauseGroup extends GeminiObject {
        constructor() {
            super();
            this.operandField = ClauseLogicalOperand.or;
        }
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get Operand() {
            return this.operandField;
        }
        set Operand(value) {
            this.operandField = value;
        }
    }
    Gemini.ClauseGroup = ClauseGroup;
    ///  <remarks/>
    class Clause extends GeminiObject {
        ///  <remarks/>
        get ClauseLeft() {
            return this.clauseLeftField;
        }
        set ClauseLeft(value) {
            this.clauseLeftField = value;
        }
        ///  <remarks/>
        get Operand() {
            return this.operandField;
        }
        set Operand(value) {
            this.operandField = value;
        }
        ///  <remarks/>
        get ClauseRight() {
            return this.clauseRightField;
        }
        set ClauseRight(value) {
            this.clauseRightField = value;
        }
    }
    Gemini.Clause = Clause;
    ///  <remarks/>
    class ClauseLeft extends GeminiObject {
        ///  <remarks/>
        get Item() {
            return this.itemField;
        }
        set Item(value) {
            this.itemField = value;
        }
    }
    Gemini.ClauseLeft = ClauseLeft;
    ///  <remarks/>
    (function (ClauseOperand) {
        ClauseOperand[ClauseOperand["equal"] = 0] = "equal";
        ClauseOperand[ClauseOperand["notEqual"] = 1] = "notEqual";
        ClauseOperand[ClauseOperand["less"] = 2] = "less";
        ClauseOperand[ClauseOperand["lessOrEqual"] = 3] = "lessOrEqual";
        ClauseOperand[ClauseOperand["greater"] = 4] = "greater";
        ClauseOperand[ClauseOperand["greaterEqual"] = 5] = "greaterEqual";
    })(Gemini.ClauseOperand || (Gemini.ClauseOperand = {}));
    var ClauseOperand = Gemini.ClauseOperand;
    ///  <remarks/>
    class ClauseRight extends GeminiObject {
        ///  <remarks/>
        get Item() {
            return this.itemField;
        }
        set Item(value) {
            this.itemField = value;
        }
        ///  <remarks/>
        get ItemElementName() {
            return this.itemElementNameField;
        }
        set ItemElementName(value) {
            this.itemElementNameField = value;
        }
    }
    Gemini.ClauseRight = ClauseRight;
    ///  <remarks/>
    (function (ItemChoiceType) {
        ItemChoiceType[ItemChoiceType["Absolute"] = 0] = "Absolute";
        ItemChoiceType[ItemChoiceType["UID"] = 1] = "UID";
    })(Gemini.ItemChoiceType || (Gemini.ItemChoiceType = {}));
    var ItemChoiceType = Gemini.ItemChoiceType;
    ///  <remarks/>
    (function (ClauseLogicalOperand) {
        ClauseLogicalOperand[ClauseLogicalOperand["and"] = 0] = "and";
        ClauseLogicalOperand[ClauseLogicalOperand["or"] = 1] = "or";
    })(Gemini.ClauseLogicalOperand || (Gemini.ClauseLogicalOperand = {}));
    var ClauseLogicalOperand = Gemini.ClauseLogicalOperand;
    ///  <remarks/>
    class DisableStartsProcessDependency extends Dependency {
    }
    Gemini.DisableStartsProcessDependency = DisableStartsProcessDependency;
    ///  <remarks/>
    class ChangeStatusDependency extends Dependency {
        constructor() {
            super();
            this.statusField = Status.optional;
        }
        ///  <remarks/>
        get Status() {
            return this.statusField;
        }
        set Status(value) {
            this.statusField = value;
        }
    }
    Gemini.ChangeStatusDependency = ChangeStatusDependency;
    ///  <remarks/>
    (function (Status) {
        Status[Status["optional"] = 0] = "optional";
        Status[Status["mandatory"] = 1] = "mandatory";
        Status[Status["obsolete"] = 2] = "obsolete";
    })(Gemini.Status || (Gemini.Status = {}));
    var Status = Gemini.Status;
    ///  <remarks/>
    class RangeDependency extends Dependency {
        ///  <remarks/>
        get EndUID() {
            return this.endUIDField;
        }
        set EndUID(value) {
            this.endUIDField = value;
        }
    }
    Gemini.RangeDependency = RangeDependency;
    ///  <remarks/>
    class BaseInactiveDependency extends Dependency {
    }
    Gemini.BaseInactiveDependency = BaseInactiveDependency;
    ///  <remarks/>
    class GuixInactiveDependency extends BaseInactiveDependency {
    }
    Gemini.GuixInactiveDependency = GuixInactiveDependency;
    ///  <remarks/>
    class InactiveDependency extends BaseInactiveDependency {
    }
    Gemini.InactiveDependency = InactiveDependency;
    ///  <remarks/>
    class UniqueItem extends GeminiObject {
        ///  <remarks/>
        get UID() {
            return this.uIDField;
        }
        set UID(value) {
            this.uIDField = value;
        }
        ///  <remarks/>
        get Name() {
            return this.nameField;
        }
        set Name(value) {
            this.nameField = value;
        }
    }
    Gemini.UniqueItem = UniqueItem;
    ///  <remarks/>
    class GuixGroup extends UniqueItem {
        constructor() {
            super();
            this.rowField = 0;
        }
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get Row() {
            return this.rowField;
        }
        set Row(value) {
            this.rowField = value;
        }
    }
    Gemini.GuixGroup = GuixGroup;
    ///  <remarks/>
    class GuixObject extends GuixItem {
        ///  <remarks/>
        get GuixPresentation() {
            return this.guixPresentationField;
        }
        set GuixPresentation(value) {
            this.guixPresentationField = value;
        }
    }
    Gemini.GuixObject = GuixObject;
    ///  <remarks/>
    class GuixPresentation extends GeminiObject {
        constructor() {
            super();
            this.isMultilineTextField = false;
            this.isUrlField = false;
            this.doNotConvertToLocalTimeField = false;
            this.showAsProfileSelectorField = false;
            this.isPasswordFieldField = false;
        }
        ///  <remarks/>
        get ValueConverter() {
            return this.valueConverterField;
        }
        set ValueConverter(value) {
            this.valueConverterField = value;
        }
        ///  <remarks/>
        get NumericUpDown() {
            return this.numericUpDownField;
        }
        set NumericUpDown(value) {
            this.numericUpDownField = value;
        }
        ///  <remarks/>
        get MultilineTextOptions() {
            return this.multilineTextOptionsField;
        }
        set MultilineTextOptions(value) {
            this.multilineTextOptionsField = value;
        }
        ///  <remarks/>
        get IsMultilineText() {
            return this.isMultilineTextField;
        }
        set IsMultilineText(value) {
            this.isMultilineTextField = value;
        }
        ///  <remarks/>
        get IsUrl() {
            return this.isUrlField;
        }
        set IsUrl(value) {
            this.isUrlField = value;
        }
        ///  <remarks/>
        get DoNotConvertToLocalTime() {
            return this.doNotConvertToLocalTimeField;
        }
        set DoNotConvertToLocalTime(value) {
            this.doNotConvertToLocalTimeField = value;
        }
        ///  <remarks/>
        get ShowAsProfileSelector() {
            return this.showAsProfileSelectorField;
        }
        set ShowAsProfileSelector(value) {
            this.showAsProfileSelectorField = value;
        }
        ///  <remarks/>
        get IsPasswordField() {
            return this.isPasswordFieldField;
        }
        set IsPasswordField(value) {
            this.isPasswordFieldField = value;
        }
    }
    Gemini.GuixPresentation = GuixPresentation;
    ///  <remarks/>
    class GuixTable extends GuixItem {
        constructor() {
            super();
            this.hideIndexField = false;
            this.defaultMaxRepetitionsField = 10;
            this.isSingleRowTableField = false;
            this.doNotExpandField = false;
        }
        ///  <remarks/>
        get GuixTableColumn() {
            return this.guixTableColumnField;
        }
        set GuixTableColumn(value) {
            this.guixTableColumnField = value;
        }
        ///  <remarks/>
        get InnerGuixTable() {
            return this.innerGuixTableField;
        }
        set InnerGuixTable(value) {
            this.innerGuixTableField = value;
        }
        ///  <remarks/>
        get Commands() {
            return this.commandsField;
        }
        set Commands(value) {
            this.commandsField = value;
        }
        ///  <remarks/>
        get ColumnGroup() {
            return this.columnGroupField;
        }
        set ColumnGroup(value) {
            this.columnGroupField = value;
        }
        ///  <remarks/>
        get HideIndex() {
            return this.hideIndexField;
        }
        set HideIndex(value) {
            this.hideIndexField = value;
        }
        ///  <remarks/>
        get DefaultMaxRepetitions() {
            return this.defaultMaxRepetitionsField;
        }
        set DefaultMaxRepetitions(value) {
            this.defaultMaxRepetitionsField = value;
        }
        ///  <remarks/>
        get IsSingleRowTable() {
            return this.isSingleRowTableField;
        }
        set IsSingleRowTable(value) {
            this.isSingleRowTableField = value;
        }
        ///  <remarks/>
        get DoNotExpand() {
            return this.doNotExpandField;
        }
        set DoNotExpand(value) {
            this.doNotExpandField = value;
        }
    }
    Gemini.GuixTable = GuixTable;
    ///  <remarks/>
    class GuixTableColumn extends AttachedMibxItem {
        constructor() {
            super();
            this.isSingleRowTableNameField = false;
        }
        ///  <remarks/>
        get GuixPresentation() {
            return this.guixPresentationField;
        }
        set GuixPresentation(value) {
            this.guixPresentationField = value;
        }
        ///  <remarks/>
        get GroupUID() {
            return this.groupUIDField;
        }
        set GroupUID(value) {
            this.groupUIDField = value;
        }
        ///  <remarks/>
        get IsSingleRowTableName() {
            return this.isSingleRowTableNameField;
        }
        set IsSingleRowTableName(value) {
            this.isSingleRowTableNameField = value;
        }
    }
    Gemini.GuixTableColumn = GuixTableColumn;
    ///  <remarks/>
    class Commands extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
    }
    Gemini.Commands = Commands;
    ///  <remarks/>
    class GuixCommand extends UniqueItem {
        constructor() {
            super();
            this.attachToRowInstanceField = false;
            this.uIAccessLevelField = UIAccessLevel.normal;
            this.quickAccessField = false;
            this.useInBulkField = true;
        }
        ///  <remarks/>
        get GuixPrimaryCommandObject() {
            return this.guixPrimaryCommandObjectField;
        }
        set GuixPrimaryCommandObject(value) {
            this.guixPrimaryCommandObjectField = value;
        }
        ///  <remarks/>
        get GuixCommandParameter() {
            return this.guixCommandParameterField;
        }
        set GuixCommandParameter(value) {
            this.guixCommandParameterField = value;
        }
        ///  <remarks/>
        get Value() {
            return this.valueField;
        }
        set Value(value) {
            this.valueField = value;
        }
        ///  <remarks/>
        get AttachToRowInstance() {
            return this.attachToRowInstanceField;
        }
        set AttachToRowInstance(value) {
            this.attachToRowInstanceField = value;
        }
        ///  <remarks/>
        get UIAccessLevel() {
            return this.uIAccessLevelField;
        }
        set UIAccessLevel(value) {
            this.uIAccessLevelField = value;
        }
        ///  <remarks/>
        get QuickAccess() {
            return this.quickAccessField;
        }
        set QuickAccess(value) {
            this.quickAccessField = value;
        }
        ///  <remarks/>
        get UseInBulk() {
            return this.useInBulkField;
        }
        set UseInBulk(value) {
            this.useInBulkField = value;
        }
    }
    Gemini.GuixCommand = GuixCommand;
    ///  <remarks/>
    class GuixPrimaryCommandObject extends AttachedMibxItem {
    }
    Gemini.GuixPrimaryCommandObject = GuixPrimaryCommandObject;
    ///  <remarks/>
    class GuixCommandParameter extends AttachedMibxItem {
        ///  <remarks/>
        get GuixPresentation() {
            return this.guixPresentationField;
        }
        set GuixPresentation(value) {
            this.guixPresentationField = value;
        }
    }
    Gemini.GuixCommandParameter = GuixCommandParameter;
    ///  <remarks/>
    (function (UIAccessLevel) {
        UIAccessLevel[UIAccessLevel["normal"] = 0] = "normal";
        UIAccessLevel[UIAccessLevel["tech"] = 1] = "tech";
    })(Gemini.UIAccessLevel || (Gemini.UIAccessLevel = {}));
    var UIAccessLevel = Gemini.UIAccessLevel;
    ///  <remarks/>
    class GuixCommandNode extends UniqueItem {
        constructor() {
            super();
            this.uIAccessLevelField = UIAccessLevel.normal;
        }
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get UIAccessLevel() {
            return this.uIAccessLevelField;
        }
        set UIAccessLevel(value) {
            this.uIAccessLevelField = value;
        }
    }
    Gemini.GuixCommandNode = GuixCommandNode;
    ///  <remarks/>
    class GuixCommandSeparator extends Element {
    }
    Gemini.GuixCommandSeparator = GuixCommandSeparator;
    ///  <remarks/>
    class LinkedGuixCommand extends GeminiObject {
        ///  <remarks/>
        get CommandUID() {
            return this.commandUIDField;
        }
        set CommandUID(value) {
            this.commandUIDField = value;
        }
    }
    Gemini.LinkedGuixCommand = LinkedGuixCommand;
    ///  <remarks/>
    class LinkedGuixCommandNode extends GeminiObject {
        ///  <remarks/>
        get CommandNodeUID() {
            return this.commandNodeUIDField;
        }
        set CommandNodeUID(value) {
            this.commandNodeUIDField = value;
        }
    }
    Gemini.LinkedGuixCommandNode = LinkedGuixCommandNode;
    ///  <remarks/>
    class ColumnGroup extends UniqueItem {
    }
    Gemini.ColumnGroup = ColumnGroup;
    ///  <remarks/>
    class EventBase extends UniqueItem {
        constructor() {
            super();
            this.exportToCField = true;
        }
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get Arg() {
            return this.argField;
        }
        set Arg(value) {
            this.argField = value;
        }
        ///  <remarks/>
        get ID() {
            return this.idField;
        }
        set ID(value) {
            this.idField = value;
        }
        ///  <remarks/>
        get Category() {
            return this.categoryField;
        }
        set Category(value) {
            this.categoryField = value;
        }
        ///  <remarks/>
        get Type() {
            return this.typeField;
        }
        set Type(value) {
            this.typeField = value;
        }
        ///  <remarks/>
        get Version() {
            return this.versionField;
        }
        set Version(value) {
            this.versionField = value;
        }
        ///  <remarks/>
        get Severity() {
            return this.severityField;
        }
        set Severity(value) {
            this.severityField = value;
        }
        ///  <remarks/>
        get ExportToC() {
            return this.exportToCField;
        }
        set ExportToC(value) {
            this.exportToCField = value;
        }
    }
    Gemini.EventBase = EventBase;
    ///  <remarks/>
    (function (Severity) {
        Severity[Severity["information"] = 0] = "information";
        Severity[Severity["normal"] = 1] = "normal";
        Severity[Severity["warning"] = 2] = "warning";
        Severity[Severity["minor"] = 3] = "minor";
        Severity[Severity["major"] = 4] = "major";
        Severity[Severity["critical"] = 5] = "critical";
    })(Gemini.Severity || (Gemini.Severity = {}));
    var Severity = Gemini.Severity;
    ///  <remarks/>
    class HealthRule extends UniqueItem {
        constructor() {
            super();
            this.waitPeriodField = 0;
            this.intervalField = 60;
            this.timeoutField = 1;
            this.retriesField = 1;
        }
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get Condition() {
            return this.conditionField;
        }
        set Condition(value) {
            this.conditionField = value;
        }
        ///  <remarks/>
        get Severity() {
            return this.severityField;
        }
        set Severity(value) {
            this.severityField = value;
        }
        ///  <remarks/>
        get SeverityAfter() {
            return this.severityAfterField;
        }
        set SeverityAfter(value) {
            this.severityAfterField = value;
        }
        ///  <remarks/>
        get WaitPeriod() {
            return this.waitPeriodField;
        }
        set WaitPeriod(value) {
            this.waitPeriodField = value;
        }
        ///  <remarks/>
        get Interval() {
            return this.intervalField;
        }
        set Interval(value) {
            this.intervalField = value;
        }
        ///  <remarks/>
        get Timeout() {
            return this.timeoutField;
        }
        set Timeout(value) {
            this.timeoutField = value;
        }
        ///  <remarks/>
        get Retries() {
            return this.retriesField;
        }
        set Retries(value) {
            this.retriesField = value;
        }
        ///  <remarks/>
        get EventID() {
            return this.eventIDField;
        }
        set EventID(value) {
            this.eventIDField = value;
        }
    }
    Gemini.HealthRule = HealthRule;
    class MibxItem extends UniqueItem {
        constructor() {
            super();
            this.statusField = Status.optional;
            this.exportToMibField = true;
            this.exportToCField = true;
            this.supportedInField = SupportedIn.operational;
            this.exportToJavaField = true;
        }
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get DevNote() {
            return this.devNoteField;
        }
        set DevNote(value) {
            this.devNoteField = value;
        }
        ///  <remarks/>
        get DevNote2() {
            return this.devNote2Field;
        }
        set DevNote2(value) {
            this.devNote2Field = value;
        }
        ///  <remarks/>
        get DevNote3() {
            return this.devNote3Field;
        }
        set DevNote3(value) {
            this.devNote3Field = value;
        }
        ///  <remarks/>
        get DevNote4() {
            return this.devNote4Field;
        }
        set DevNote4(value) {
            this.devNote4Field = value;
        }
        ///  <remarks/>
        get MibName() {
            return this.mibNameField;
        }
        set MibName(value) {
            this.mibNameField = value;
        }
        ///  <remarks/>
        get ID() {
            return this.idField;
        }
        set ID(value) {
            this.idField = value;
        }
        ///  <remarks/>
        get OID() {
            return this.oIDField;
        }
        set OID(value) {
            this.oIDField = value;
        }
        ///  <remarks/>
        get Status() {
            return this.statusField;
        }
        set Status(value) {
            this.statusField = value;
        }
        ///  <remarks/>
        get ExportToMib() {
            return this.exportToMibField;
        }
        set ExportToMib(value) {
            this.exportToMibField = value;
        }
        ///  <remarks/>
        get ExportToC() {
            return this.exportToCField;
        }
        set ExportToC(value) {
            this.exportToCField = value;
        }
        ///  <remarks/>
        get SupportedIn() {
            return this.supportedInField;
        }
        set SupportedIn(value) {
            this.supportedInField = value;
        }
        ///  <remarks/>
        get ExportToJava() {
            return this.exportToJavaField;
        }
        set ExportToJava(value) {
            this.exportToJavaField = value;
        }
    }
    Gemini.MibxItem = MibxItem;
    ///  <remarks/>
    (function (SupportedIn) {
        SupportedIn[SupportedIn["operational"] = 0] = "operational";
        SupportedIn[SupportedIn["boot"] = 1] = "boot";
        SupportedIn[SupportedIn["both"] = 2] = "both";
    })(Gemini.SupportedIn || (Gemini.SupportedIn = {}));
    var SupportedIn = Gemini.SupportedIn;
    ///  <remarks/>
    class MibxObject extends MibxItem {
        constructor() {
            super();
            this.maxAccessField = MibMaxAccess.readonly;
            this.readAccessField = AccessLevel.guest;
            this.writeAccessField = AccessLevel.operator;
            this.modeField = ObjectMode.none;
            this.serviceInterruptionField = ServiceInterruption.reset;
        }
        ///  <remarks/>
        get Transport() {
            return this.transportField;
        }
        set Transport(value) {
            this.transportField = value;
        }
        ///  <remarks/>
        get Dependencies() {
            return this.dependenciesField;
        }
        set Dependencies(value) {
            this.dependenciesField = value;
        }
        ///  <remarks/>
        get MaxAccess() {
            return this.maxAccessField;
        }
        set MaxAccess(value) {
            this.maxAccessField = value;
        }
        ///  <remarks/>
        get ReadAccess() {
            return this.readAccessField;
        }
        set ReadAccess(value) {
            this.readAccessField = value;
        }
        ///  <remarks/>
        get WriteAccess() {
            return this.writeAccessField;
        }
        set WriteAccess(value) {
            this.writeAccessField = value;
        }
        ///  <remarks/>
        get Mode() {
            return this.modeField;
        }
        set Mode(value) {
            this.modeField = value;
        }
        ///  <remarks/>
        get ServiceInterruption() {
            return this.serviceInterruptionField;
        }
        set ServiceInterruption(value) {
            this.serviceInterruptionField = value;
        }
    }
    Gemini.MibxObject = MibxObject;
    ///  <remarks/>
    class Transport extends GeminiObject {
        ///  <remarks/>
        get Sequence() {
            return this.sequenceField;
        }
        set Sequence(value) {
            this.sequenceField = value;
        }
        ///  <remarks/>
        get SequenceSpecified() {
            return this.sequenceFieldSpecified;
        }
        set SequenceSpecified(value) {
            this.sequenceFieldSpecified = value;
        }
        ///  <remarks/>
        get PDUSequence() {
            return this.pDUSequenceField;
        }
        set PDUSequence(value) {
            this.pDUSequenceField = value;
        }
        ///  <remarks/>
        get PDUSequenceSpecified() {
            return this.pDUSequenceFieldSpecified;
        }
        set PDUSequenceSpecified(value) {
            this.pDUSequenceFieldSpecified = value;
        }
    }
    Gemini.Transport = Transport;
    ///  <remarks/>
    class Dependencies extends GeminiObject {
        ///  <remarks/>
        get InactiveDependency() {
            return this.inactiveDependencyField;
        }
        set InactiveDependency(value) {
            this.inactiveDependencyField = value;
        }
        ///  <remarks/>
        get SetValueDependency() {
            return this.setValueDependencyField;
        }
        set SetValueDependency(value) {
            this.setValueDependencyField = value;
        }
        ///  <remarks/>
        get LimitsDependency() {
            return this.limitsDependencyField;
        }
        set LimitsDependency(value) {
            this.limitsDependencyField = value;
        }
        ///  <remarks/>
        get LicenseDependency() {
            return this.licenseDependencyField;
        }
        set LicenseDependency(value) {
            this.licenseDependencyField = value;
        }
        ///  <remarks/>
        get TableLimitsDependency() {
            return this.tableLimitsDependencyField;
        }
        set TableLimitsDependency(value) {
            this.tableLimitsDependencyField = value;
        }
        ///  <remarks/>
        get ReadOnlyDependency() {
            return this.readOnlyDependencyField;
        }
        set ReadOnlyDependency(value) {
            this.readOnlyDependencyField = value;
        }
        ///  <remarks/>
        get RangeDependency() {
            return this.rangeDependencyField;
        }
        set RangeDependency(value) {
            this.rangeDependencyField = value;
        }
        ///  <remarks/>
        get ChangeStatusDependency() {
            return this.changeStatusDependencyField;
        }
        set ChangeStatusDependency(value) {
            this.changeStatusDependencyField = value;
        }
        ///  <remarks/>
        get DisableStartsProcessDependency() {
            return this.disableStartsProcessDependencyField;
        }
        set DisableStartsProcessDependency(value) {
            this.disableStartsProcessDependencyField = value;
        }
    }
    Gemini.Dependencies = Dependencies;
    ///  <remarks/>
    class SetValueDependency extends Dependency {
        ///  <remarks/>
        get SetValue() {
            return this.setValueField;
        }
        set SetValue(value) {
            this.setValueField = value;
        }
    }
    Gemini.SetValueDependency = SetValueDependency;
    ///  <remarks/>
    class SetValue extends GeminiObject {
        ///  <remarks/>
        get Item() {
            return this.itemField;
        }
        set Item(value) {
            this.itemField = value;
        }
        ///  <remarks/>
        get ItemElementName() {
            return this.itemElementNameField;
        }
        set ItemElementName(value) {
            this.itemElementNameField = value;
        }
    }
    Gemini.SetValue = SetValue;
    ///  <remarks/>
    (function (ItemChoiceType1) {
        ItemChoiceType1[ItemChoiceType1["Absolute"] = 0] = "Absolute";
        ItemChoiceType1[ItemChoiceType1["UID"] = 1] = "UID";
    })(Gemini.ItemChoiceType1 || (Gemini.ItemChoiceType1 = {}));
    var ItemChoiceType1 = Gemini.ItemChoiceType1;
    ///  <remarks/>
    class LimitsDependency extends Dependency {
        constructor() {
            super();
            this.allowField = true;
        }
        ///  <remarks/>
        get LimitId() {
            return this.limitIdField;
        }
        set LimitId(value) {
            this.limitIdField = value;
        }
        ///  <remarks/>
        get Allow() {
            return this.allowField;
        }
        set Allow(value) {
            this.allowField = value;
        }
    }
    Gemini.LimitsDependency = LimitsDependency;
    ///  <remarks/>
    class LicenseDependency extends Dependency {
        ///  <remarks/>
        get LicenseCode() {
            return this.licenseCodeField;
        }
        set LicenseCode(value) {
            this.licenseCodeField = value;
        }
    }
    Gemini.LicenseDependency = LicenseDependency;
    ///  <remarks/>
    class TableLimitsDependency extends Dependency {
        constructor() {
            super();
            this.minRowsField = 0;
        }
        ///  <remarks/>
        get MinRows() {
            return this.minRowsField;
        }
        set MinRows(value) {
            this.minRowsField = value;
        }
        ///  <remarks/>
        get MaxRows() {
            return this.maxRowsField;
        }
        set MaxRows(value) {
            this.maxRowsField = value;
        }
        ///  <remarks/>
        get MaxRowsSpecified() {
            return this.maxRowsFieldSpecified;
        }
        set MaxRowsSpecified(value) {
            this.maxRowsFieldSpecified = value;
        }
        ///  <remarks/>
        get MinRowsLookup() {
            return this.minRowsLookupField;
        }
        set MinRowsLookup(value) {
            this.minRowsLookupField = value;
        }
        ///  <remarks/>
        get MaxRowsLookup() {
            return this.maxRowsLookupField;
        }
        set MaxRowsLookup(value) {
            this.maxRowsLookupField = value;
        }
    }
    Gemini.TableLimitsDependency = TableLimitsDependency;
    ///  <remarks/>
    class ReadOnlyDependency extends Dependency {
    }
    Gemini.ReadOnlyDependency = ReadOnlyDependency;
    ///  <remarks/>
    (function (MibMaxAccess) {
        MibMaxAccess[MibMaxAccess["notaccessible"] = 0] = "notaccessible";
        MibMaxAccess[MibMaxAccess["accessiblefornotify"] = 1] = "accessiblefornotify";
        MibMaxAccess[MibMaxAccess["readonly"] = 2] = "readonly";
        MibMaxAccess[MibMaxAccess["readwrite"] = 3] = "readwrite";
        MibMaxAccess[MibMaxAccess["readcreate"] = 4] = "readcreate";
    })(Gemini.MibMaxAccess || (Gemini.MibMaxAccess = {}));
    var MibMaxAccess = Gemini.MibMaxAccess;
    ///  <remarks/>
    (function (AccessLevel) {
        AccessLevel[AccessLevel["guest"] = 0] = "guest";
        AccessLevel[AccessLevel["user"] = 1] = "user";
        AccessLevel[AccessLevel["operator"] = 2] = "operator";
        AccessLevel[AccessLevel["admin"] = 3] = "admin";
        AccessLevel[AccessLevel["supervisor"] = 4] = "supervisor";
        AccessLevel[AccessLevel["tech"] = 5] = "tech";
        AccessLevel[AccessLevel["readonly"] = 6] = "readonly";
    })(Gemini.AccessLevel || (Gemini.AccessLevel = {}));
    var AccessLevel = Gemini.AccessLevel;
    ///  <remarks/>
    (function (ObjectMode) {
        ObjectMode[ObjectMode["none"] = 0] = "none";
        ObjectMode[ObjectMode["template"] = 1] = "template";
        ObjectMode[ObjectMode["element"] = 2] = "element";
        ObjectMode[ObjectMode["NMS"] = 3] = "NMS";
    })(Gemini.ObjectMode || (Gemini.ObjectMode = {}));
    var ObjectMode = Gemini.ObjectMode;
    ///  <remarks/>
    (function (ServiceInterruption) {
        ServiceInterruption[ServiceInterruption["none"] = 0] = "none";
        ServiceInterruption[ServiceInterruption["interruption"] = 1] = "interruption";
        ServiceInterruption[ServiceInterruption["reset"] = 2] = "reset";
    })(Gemini.ServiceInterruption || (Gemini.ServiceInterruption = {}));
    var ServiceInterruption = Gemini.ServiceInterruption;
    ///  <remarks/>
    class MibxContainer extends MibxObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
    }
    Gemini.MibxContainer = MibxContainer;
    ///  <remarks/>
    class Node extends MibxContainer {
        constructor() {
            super();
            this.importedField = false;
        }
        ///  <remarks/>
        get Imported() {
            return this.importedField;
        }
        set Imported(value) {
            this.importedField = value;
        }
        ///  <remarks/>
        get ImportedMibName() {
            return this.importedMibNameField;
        }
        set ImportedMibName(value) {
            this.importedMibNameField = value;
        }
    }
    Gemini.Node = Node;
    ///  <remarks/>
    class Param extends MibxObject {
        constructor() {
            super();
            this.unitsField = Units.Empty;
            this.usageField = ParamUsage.none;
            this.nonDuplicatableField = false;
            this.allowSuggestedValueField = false;
            this.allowSuggestedValueOnValueChangedField = false;
            this.allowPossibleValuesField = false;
            this.allowMultipleEditField = false;
            this.startsProcessField = false;
            this.uniqueField = false;
            this.searchableField = false;
        }
        ///  <remarks/>
        get Limits() {
            return this.limitsField;
        }
        set Limits(value) {
            this.limitsField = value;
        }
        ///  <remarks/>
        get Upgrade() {
            return this.upgradeField;
        }
        set Upgrade(value) {
            this.upgradeField = value;
        }
        ///  <remarks/>
        get Type() {
            return this.typeField;
        }
        set Type(value) {
            this.typeField = value;
        }
        ///  <remarks/>
        get Default() {
            return this.defaultField;
        }
        set Default(value) {
            this.defaultField = value;
        }
        ///  <remarks/>
        get FlashOffseet() {
            return this.flashOffseetField;
        }
        set FlashOffseet(value) {
            this.flashOffseetField = value;
        }
        ///  <remarks/>
        get Units() {
            return this.unitsField;
        }
        set Units(value) {
            this.unitsField = value;
        }
        ///  <remarks/>
        get Usage() {
            return this.usageField;
        }
        set Usage(value) {
            this.usageField = value;
        }
        ///  <remarks/>
        get NonDuplicatable() {
            return this.nonDuplicatableField;
        }
        set NonDuplicatable(value) {
            this.nonDuplicatableField = value;
        }
        ///  <remarks/>
        get AllowSuggestedValue() {
            return this.allowSuggestedValueField;
        }
        set AllowSuggestedValue(value) {
            this.allowSuggestedValueField = value;
        }
        ///  <remarks/>
        get AllowSuggestedValueOnValueChanged() {
            return this.allowSuggestedValueOnValueChangedField;
        }
        set AllowSuggestedValueOnValueChanged(value) {
            this.allowSuggestedValueOnValueChangedField = value;
        }
        ///  <remarks/>
        get AllowPossibleValues() {
            return this.allowPossibleValuesField;
        }
        set AllowPossibleValues(value) {
            this.allowPossibleValuesField = value;
        }
        ///  <remarks/>
        get AllowMultipleEdit() {
            return this.allowMultipleEditField;
        }
        set AllowMultipleEdit(value) {
            this.allowMultipleEditField = value;
        }
        ///  <remarks/>
        get StartsProcess() {
            return this.startsProcessField;
        }
        set StartsProcess(value) {
            this.startsProcessField = value;
        }
        ///  <remarks/>
        get Unique() {
            return this.uniqueField;
        }
        set Unique(value) {
            this.uniqueField = value;
        }
        ///  <remarks/>
        get Searchable() {
            return this.searchableField;
        }
        set Searchable(value) {
            this.searchableField = value;
        }
        ///  <remarks/>
        get MessageOnChange() {
            return this.messageOnChangeField;
        }
        set MessageOnChange(value) {
            this.messageOnChangeField = value;
        }
    }
    Gemini.Param = Param;
    ///  <remarks/>
    class Limits extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get RegEx() {
            return this.regExField;
        }
        set RegEx(value) {
            this.regExField = value;
        }
    }
    Gemini.Limits = Limits;
    ///  <remarks/>
    class Enum extends EnumBase {
        ///  <remarks/>
        get Name() {
            return this.nameField;
        }
        set Name(value) {
            this.nameField = value;
        }
    }
    Gemini.Enum = Enum;
    ///  <remarks/>
    class Range extends RangeBase {
    }
    Gemini.Range = Range;
    ///  <remarks/>
    class StrLen extends RangeBase {
    }
    Gemini.StrLen = StrLen;
    ///  <remarks/>
    class Upgrade extends GeminiObject {
        constructor() {
            super();
            this.defaultField = DefaultUpgrade.none;
        }
        ///  <remarks/>
        get Default() {
            return this.defaultField;
        }
        set Default(value) {
            this.defaultField = value;
        }
        ///  <remarks/>
        get Convert() {
            return this.convertField;
        }
        set Convert(value) {
            this.convertField = value;
        }
    }
    Gemini.Upgrade = Upgrade;
    ///  <remarks/>
    (function (DefaultUpgrade) {
        DefaultUpgrade[DefaultUpgrade["none"] = 0] = "none";
        DefaultUpgrade[DefaultUpgrade["overwriteunchanged"] = 1] = "overwriteunchanged";
        DefaultUpgrade[DefaultUpgrade["overwrite"] = 2] = "overwrite";
    })(Gemini.DefaultUpgrade || (Gemini.DefaultUpgrade = {}));
    var DefaultUpgrade = Gemini.DefaultUpgrade;
    ///  <remarks/>
    (function (Type) {
        Type[Type["String"] = 0] = "String";
        Type[Type["Bool"] = 1] = "Bool";
        Type[Type["OID"] = 2] = "OID";
        Type[Type["Int32Bits"] = 3] = "Int32Bits";
        Type[Type["Int8"] = 4] = "Int8";
        Type[Type["UInt8"] = 5] = "UInt8";
        Type[Type["Int16"] = 6] = "Int16";
        Type[Type["UInt16"] = 7] = "UInt16";
        Type[Type["Int32"] = 8] = "Int32";
        Type[Type["UInt32"] = 9] = "UInt32";
        Type[Type["Int64"] = 10] = "Int64";
        Type[Type["UInt64"] = 11] = "UInt64";
        Type[Type["Float"] = 12] = "Float";
        Type[Type["Double"] = 13] = "Double";
        Type[Type["DateTime"] = 14] = "DateTime";
        Type[Type["Date"] = 15] = "Date";
        Type[Type["Time"] = 16] = "Time";
        Type[Type["TimeTicks"] = 17] = "TimeTicks";
        Type[Type["MAC"] = 18] = "MAC";
        Type[Type["IPv4"] = 19] = "IPv4";
        Type[Type["IPv4Hex"] = 20] = "IPv4Hex";
        Type[Type["IPv4Multicast"] = 21] = "IPv4Multicast";
        Type[Type["IPv4MulticastHex"] = 22] = "IPv4MulticastHex";
        Type[Type["IPv4Unicast"] = 23] = "IPv4Unicast";
        Type[Type["IPv4UnicastHex"] = 24] = "IPv4UnicastHex";
        Type[Type["IPv6"] = 25] = "IPv6";
        Type[Type["IPv6PrefixLength"] = 26] = "IPv6PrefixLength";
        Type[Type["RowStatus"] = 27] = "RowStatus";
        Type[Type["Complex"] = 28] = "Complex";
        Type[Type["SubnetMask"] = 29] = "SubnetMask";
        Type[Type["File"] = 30] = "File";
    })(Gemini.Type || (Gemini.Type = {}));
    var Type = Gemini.Type;
    ///  <remarks/>
    (function (ParamUsage) {
        ParamUsage[ParamUsage["none"] = 0] = "none";
        ParamUsage[ParamUsage["config"] = 1] = "config";
    })(Gemini.ParamUsage || (Gemini.ParamUsage = {}));
    var ParamUsage = Gemini.ParamUsage;
    ///  <remarks/>
    class Table extends MibxContainer {
        constructor() {
            super();
            this.minRowsField = 0;
            this.rowsAuthField = AccessLevel.admin;
            this.usageField = ParamUsage.none;
        }
        ///  <remarks/>
        get TableDef() {
            return this.tableDefField;
        }
        set TableDef(value) {
            this.tableDefField = value;
        }
        ///  <remarks/>
        get RowDefaults() {
            return this.rowDefaultsField;
        }
        set RowDefaults(value) {
            this.rowDefaultsField = value;
        }
        ///  <remarks/>
        get MinRows() {
            return this.minRowsField;
        }
        set MinRows(value) {
            this.minRowsField = value;
        }
        ///  <remarks/>
        get MaxRows() {
            return this.maxRowsField;
        }
        set MaxRows(value) {
            this.maxRowsField = value;
        }
        ///  <remarks/>
        get MaxRowsSpecified() {
            return this.maxRowsFieldSpecified;
        }
        set MaxRowsSpecified(value) {
            this.maxRowsFieldSpecified = value;
        }
        ///  <remarks/>
        get RowsAuth() {
            return this.rowsAuthField;
        }
        set RowsAuth(value) {
            this.rowsAuthField = value;
        }
        ///  <remarks/>
        get Usage() {
            return this.usageField;
        }
        set Usage(value) {
            this.usageField = value;
        }
    }
    Gemini.Table = Table;
    ///  <remarks/>
    class TableDef extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get ItemsElementName() {
            return this.itemsElementNameField;
        }
        set ItemsElementName(value) {
            this.itemsElementNameField = value;
        }
    }
    Gemini.TableDef = TableDef;
    ///  <remarks/>
    (function (ItemsChoiceType) {
        ItemsChoiceType[ItemsChoiceType["Augments"] = 0] = "Augments";
        ItemsChoiceType[ItemsChoiceType["Index"] = 1] = "Index";
        ItemsChoiceType[ItemsChoiceType["RowStatus"] = 2] = "RowStatus";
    })(Gemini.ItemsChoiceType || (Gemini.ItemsChoiceType = {}));
    var ItemsChoiceType = Gemini.ItemsChoiceType;
    ///  <remarks/>
    class RowDefaultsRow extends GeminiObject {
        ///  <remarks/>
        get ColumnDefault() {
            return this.columnDefaultField;
        }
        set ColumnDefault(value) {
            this.columnDefaultField = value;
        }
        ///  <remarks/>
        get IndexValue() {
            return this.indexValueField;
        }
        set IndexValue(value) {
            this.indexValueField = value;
        }
    }
    Gemini.RowDefaultsRow = RowDefaultsRow;
    ///  <remarks/>
    class ColumnDefault extends GeminiObject {
        ///  <remarks/>
        get UID() {
            return this.uIDField;
        }
        set UID(value) {
            this.uIDField = value;
        }
        ///  <remarks/>
        get Value() {
            return this.valueField;
        }
        set Value(value) {
            this.valueField = value;
        }
    }
    Gemini.ColumnDefault = ColumnDefault;
    ///  <remarks/>
    class Trap extends MibxItem {
        ///  <remarks/>
        get Object() {
            return this.objectField;
        }
        set Object(value) {
            this.objectField = value;
        }
        ///  <remarks/>
        get TrapMapping() {
            return this.trapMappingField;
        }
        set TrapMapping(value) {
            this.trapMappingField = value;
        }
    }
    Gemini.Trap = Trap;
    ///  <remarks/>
    class TrapMapping extends GeminiObject {
        ///  <remarks/>
        get Item() {
            return this.itemField;
        }
        set Item(value) {
            this.itemField = value;
        }
        ///  <remarks/>
        get EventAttr() {
            return this.eventAttrField;
        }
        set EventAttr(value) {
            this.eventAttrField = value;
        }
        ///  <remarks/>
        get Map() {
            return this.mapField;
        }
        set Map(value) {
            this.mapField = value;
        }
        ///  <remarks/>
        get Value() {
            return this.valueField;
        }
        set Value(value) {
            this.valueField = value;
        }
    }
    Gemini.TrapMapping = TrapMapping;
    ///  <remarks/>
    (function (EventAttributes) {
        EventAttributes[EventAttributes["id"] = 0] = "id";
        EventAttributes[EventAttributes["sequence"] = 1] = "sequence";
        EventAttributes[EventAttributes["status"] = 2] = "status";
        EventAttributes[EventAttributes["param"] = 3] = "param";
        EventAttributes[EventAttributes["version"] = 4] = "version";
        EventAttributes[EventAttributes["SubModule"] = 5] = "SubModule";
        EventAttributes[EventAttributes["SubModuleInstance"] = 6] = "SubModuleInstance";
    })(Gemini.EventAttributes || (Gemini.EventAttributes = {}));
    var EventAttributes = Gemini.EventAttributes;
    ///  <remarks/>
    (function (EventAttrMaps) {
        EventAttrMaps[EventAttrMaps["absolute"] = 0] = "absolute";
        EventAttrMaps[EventAttrMaps["lookup"] = 1] = "lookup";
        EventAttrMaps[EventAttrMaps["GetValue"] = 2] = "GetValue";
        EventAttrMaps[EventAttrMaps["position"] = 3] = "position";
        EventAttrMaps[EventAttrMaps["replace"] = 4] = "replace";
    })(Gemini.EventAttrMaps || (Gemini.EventAttrMaps = {}));
    var EventAttrMaps = Gemini.EventAttrMaps;
    ///  <remarks/>
    class CommandBase extends UniqueItem {
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get Action() {
            return this.actionField;
        }
        set Action(value) {
            this.actionField = value;
        }
        ///  <remarks/>
        get Parameters() {
            return this.parametersField;
        }
        set Parameters(value) {
            this.parametersField = value;
        }
    }
    Gemini.CommandBase = CommandBase;
    ///  <remarks/>
    class PrototypeLink extends LinkBase {
    }
    Gemini.PrototypeLink = PrototypeLink;
    ///  <remarks/>
    class Links extends GeminiObject {
        ///  <remarks/>
        get PrototypeLink() {
            return this.prototypeLinkField;
        }
        set PrototypeLink(value) {
            this.prototypeLinkField = value;
        }
        ///  <remarks/>
        get SingletonLink() {
            return this.singletonLinkField;
        }
        set SingletonLink(value) {
            this.singletonLinkField = value;
        }
    }
    Gemini.Links = Links;
    ///  <remarks/>  
    class UniqueLink extends UniqueItem {
        ///  <remarks/>
        get Component() {
            return this.componentField;
        }
        set Component(value) {
            this.componentField = value;
        }
        ///  <remarks/>
        get Version() {
            return this.versionField;
        }
        set Version(value) {
            this.versionField = value;
        }
    }
    Gemini.UniqueLink = UniqueLink;
    ///  <remarks/>
    class CollectionUniqueLink extends UniqueLink {
    }
    Gemini.CollectionUniqueLink = CollectionUniqueLink;
    ///  <remarks/>
    class Licenses extends GeminiObject {
        ///  <remarks/>
        get License() {
            return this.licenseField;
        }
        set License(value) {
            this.licenseField = value;
        }
    }
    Gemini.Licenses = Licenses;
    ///  <remarks/>
    class License extends GeminiObject {
        constructor() {
            super();
            this.maxField = 1;
            this.extentField = 1;
        }
        ///  <remarks/>
        get Code() {
            return this.codeField;
        }
        set Code(value) {
            this.codeField = value;
        }
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get Max() {
            return this.maxField;
        }
        set Max(value) {
            this.maxField = value;
        }
        ///  <remarks/>
        get Extent() {
            return this.extentField;
        }
        set Extent(value) {
            this.extentField = value;
        }
    }
    Gemini.License = License;
    ///  <remarks/>
    class Command extends CommandBase {
    }
    Gemini.Command = Command;
    ///  <remarks/>
    class Commands1 extends CommandsContainer {
    }
    Gemini.Commands1 = Commands1;
    ///  <remarks/>
    class CommandsContainer extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
    }
    Gemini.CommandsContainer = CommandsContainer;
    ///  <remarks/>
    class Module extends MibxContainer {
    }
    Gemini.Module = Module;
    ///  <remarks/>
    class RowDefaults extends GeminiObject {
        ///  <remarks/>
        get Row() {
            return this.rowField;
        }
        set Row(value) {
            this.rowField = value;
        }
    }
    Gemini.RowDefaults = RowDefaults;
    ///  <remarks/>
    class SNMPHealthOid extends GeminiObject {
        ///  <remarks/>
        get Oid() {
            return this.oidField;
        }
        set Oid(value) {
            this.oidField = value;
        }
    }
    Gemini.SNMPHealthOid = SNMPHealthOid;
    ///  <remarks/>
    class SNMPHealthRule extends HealthRule {
        ///  <remarks/>
        get SNMPHealthOid() {
            return this.sNMPHealthOidField;
        }
        set SNMPHealthOid(value) {
            this.sNMPHealthOidField = value;
        }
        ///  <remarks/>
        get TrapMapping() {
            return this.trapMappingField;
        }
        set TrapMapping(value) {
            this.trapMappingField = value;
        }
    }
    Gemini.SNMPHealthRule = SNMPHealthRule;
    ///  <remarks/>
    class PingHealthRule extends HealthRule {
    }
    Gemini.PingHealthRule = PingHealthRule;
    ///  <remarks/>
    class Health extends GeminiObject {
        ///  <remarks/>
        get SNMPHealthRule() {
            return this.sNMPHealthRuleField;
        }
        set SNMPHealthRule(value) {
            this.sNMPHealthRuleField = value;
        }
        ///  <remarks/>
        get PingHealthRule() {
            return this.pingHealthRuleField;
        }
        set PingHealthRule(value) {
            this.pingHealthRuleField = value;
        }
    }
    Gemini.Health = Health;
    ///  <remarks/>
    class Event extends EventBase {
    }
    Gemini.Event = Event;
    ///  <remarks/>
    class Alarm extends EventBase {
    }
    Gemini.Alarm = Alarm;
    ///  <remarks/>
    class Alarms extends EventBaseContainer {
    }
    Gemini.Alarms = Alarms;
    ///  <remarks/>
    class EventBaseContainer extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
    }
    Gemini.EventBaseContainer = EventBaseContainer;
    ///  <remarks/>
    class Events extends EventBaseContainer {
    }
    Gemini.Events = Events;
    ///  <remarks/>
    class Mibx extends GeminiObject {
        ///  <remarks/>
        get Links() {
            return this.linksField;
        }
        set Links(value) {
            this.linksField = value;
        }
        ///  <remarks/>
        get Licenses() {
            return this.licensesField;
        }
        set Licenses(value) {
            this.licensesField = value;
        }
        ///  <remarks/>
        get Health() {
            return this.healthField;
        }
        set Health(value) {
            this.healthField = value;
        }
        ///  <remarks/>
        get Events() {
            return this.eventsField;
        }
        set Events(value) {
            this.eventsField = value;
        }
        ///  <remarks/>
        get Alarms() {
            return this.alarmsField;
        }
        set Alarms(value) {
            this.alarmsField = value;
        }
        ///  <remarks/>
        get Commands() {
            return this.commandsField;
        }
        set Commands(value) {
            this.commandsField = value;
        }
        ///  <remarks/>
        get Module() {
            return this.moduleField;
        }
        set Module(value) {
            this.moduleField = value;
        }
        ///  <remarks/>
        get Schema() {
            return this.schemaField;
        }
        set Schema(value) {
            this.schemaField = value;
        }
    }
    Gemini.Mibx = Mibx;
    ///  <remarks/>
    class GuixSection extends UniqueItem {
        constructor() {
            super();
            this.showTitleField = true;
            this.isExpandedField = true;
            this.uIAccessLevelField = UIAccessLevel.normal;
        }
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get Dependencies() {
            return this.dependenciesField;
        }
        set Dependencies(value) {
            this.dependenciesField = value;
        }
        ///  <remarks/>
        get ShowTitle() {
            return this.showTitleField;
        }
        set ShowTitle(value) {
            this.showTitleField = value;
        }
        ///  <remarks/>
        get IsExpanded() {
            return this.isExpandedField;
        }
        set IsExpanded(value) {
            this.isExpandedField = value;
        }
        ///  <remarks/>
        get UIAccessLevel() {
            return this.uIAccessLevelField;
        }
        set UIAccessLevel(value) {
            this.uIAccessLevelField = value;
        }
    }
    Gemini.GuixSection = GuixSection;
    ///  <remarks/>
    class GuixDependencies extends DependenciesBase {
        ///  <remarks/>
        get InactiveDependency() {
            return this.inactiveDependencyField;
        }
        set InactiveDependency(value) {
            this.inactiveDependencyField = value;
        }
    }
    Gemini.GuixDependencies = GuixDependencies;
    ///  <remarks/>    
    class DependenciesBase extends GeminiObject {
    }
    Gemini.DependenciesBase = DependenciesBase;
    ///  <remarks/>
    class LinkedGuixNode extends GeminiObject {
        ///  <remarks/>
        get NodeUID() {
            return this.nodeUIDField;
        }
        set NodeUID(value) {
            this.nodeUIDField = value;
        }
    }
    Gemini.LinkedGuixNode = LinkedGuixNode;
    ///  <remarks/>
    class GuixNode extends UniqueItem {
        constructor() {
            super();
            this.autoRefreshIntervalField = 15;
            this.uIAccessLevelField = UIAccessLevel.normal;
            this.isInfoField = false;
        }
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
        ///  <remarks/>
        get GuixSection() {
            return this.guixSectionField;
        }
        set GuixSection(value) {
            this.guixSectionField = value;
        }
        ///  <remarks/>
        get Dependencies() {
            return this.dependenciesField;
        }
        set Dependencies(value) {
            this.dependenciesField = value;
        }
        ///  <remarks/>
        get AutoRefreshInterval() {
            return this.autoRefreshIntervalField;
        }
        set AutoRefreshInterval(value) {
            this.autoRefreshIntervalField = value;
        }
        ///  <remarks/>
        get UIAccessLevel() {
            return this.uIAccessLevelField;
        }
        set UIAccessLevel(value) {
            this.uIAccessLevelField = value;
        }
        ///  <remarks/>
        get IsInfo() {
            return this.isInfoField;
        }
        set IsInfo(value) {
            this.isInfoField = value;
        }
    }
    Gemini.GuixNode = GuixNode;
    ///  <remarks/>
    class Configuration extends GuixContainer {
    }
    Gemini.Configuration = Configuration;
    ///  <remarks/>
    class GuixContainer extends GeminiObject {
        ///  <remarks/>
        get Items() {
            return this.itemsField;
        }
        set Items(value) {
            this.itemsField = value;
        }
    }
    Gemini.GuixContainer = GuixContainer;
    ///  <remarks/>
    class Telemetries extends GuixContainer {
    }
    Gemini.Telemetries = Telemetries;
    ///  <remarks/>
    class Guix extends GeminiObject {
        ///  <remarks/>
        get Configuration() {
            return this.configurationField;
        }
        set Configuration(value) {
            this.configurationField = value;
        }
        ///  <remarks/>
        get Telemetries() {
            return this.telemetriesField;
        }
        set Telemetries(value) {
            this.telemetriesField = value;
        }
        ///  <remarks/>
        get Commands() {
            return this.commandsField;
        }
        set Commands(value) {
            this.commandsField = value;
        }
        ///  <remarks/>
        get Schema() {
            return this.schemaField;
        }
        set Schema(value) {
            this.schemaField = value;
        }
    }
    Gemini.Guix = Guix;
    ///  <remarks/>
    class Reports extends GeminiObject {
        ///  <remarks/>
        get Report() {
            return this.reportField;
        }
        set Report(value) {
            this.reportField = value;
        }
        ///  <remarks/>
        get Schema() {
            return this.schemaField;
        }
        set Schema(value) {
            this.schemaField = value;
        }
    }
    Gemini.Reports = Reports;
    ///  <remarks/>
    class Report extends UniqueItem {
        constructor() {
            super();
            this.mandatoryField = false;
            this.showOnOverviewField = false;
            this.orderInOverviewField = (0);
            this.showOnCageViewField = false;
            this.orderInCageViewField = (0);
            this.defaultReportViewTypeField = ReportViewTypes.Line;
            this.barFunctionField = BarFunctions.None;
            this.axisXTypeField = AxisXTypes.DateTime;
            this.aggregationMethodField = RepAggregationMethod.OnNSs;
        }
        ///  <remarks/>
        get Series() {
            return this.seriesField;
        }
        set Series(value) {
            this.seriesField = value;
        }
        ///  <remarks/>
        get SupportedReportViewType() {
            return this.supportedReportViewTypeField;
        }
        set SupportedReportViewType(value) {
            this.supportedReportViewTypeField = value;
        }
        ///  <remarks/>
        get RelatedReport() {
            return this.relatedReportField;
        }
        set RelatedReport(value) {
            this.relatedReportField = value;
        }
        ///  <remarks/>
        get DrillDownReport() {
            return this.drillDownReportField;
        }
        set DrillDownReport(value) {
            this.drillDownReportField = value;
        }
        ///  <remarks/>
        get NavigationCategory() {
            return this.navigationCategoryField;
        }
        set NavigationCategory(value) {
            this.navigationCategoryField = value;
        }
        ///  <remarks/>
        get DisabledNavigationCategory() {
            return this.disabledNavigationCategoryField;
        }
        set DisabledNavigationCategory(value) {
            this.disabledNavigationCategoryField = value;
        }
        ///  <remarks/>
        get DisabledResolution() {
            return this.disabledResolutionField;
        }
        set DisabledResolution(value) {
            this.disabledResolutionField = value;
        }
        ///  <remarks/>
        get Flag() {
            return this.flagField;
        }
        set Flag(value) {
            this.flagField = value;
        }
        ///  <remarks/>
        get HelpUrl() {
            return this.helpUrlField;
        }
        set HelpUrl(value) {
            this.helpUrlField = value;
        }
        ///  <remarks/>
        get Mandatory() {
            return this.mandatoryField;
        }
        set Mandatory(value) {
            this.mandatoryField = value;
        }
        ///  <remarks/>
        get ReportTab() {
            return this.reportTabField;
        }
        set ReportTab(value) {
            this.reportTabField = value;
        }
        ///  <remarks/>
        get ShowOnOverview() {
            return this.showOnOverviewField;
        }
        set ShowOnOverview(value) {
            this.showOnOverviewField = value;
        }
        ///  <remarks/>
        get OrderInOverview() {
            return this.orderInOverviewField;
        }
        set OrderInOverview(value) {
            this.orderInOverviewField = value;
        }
        ///  <remarks/>
        get ShowOnCageView() {
            return this.showOnCageViewField;
        }
        set ShowOnCageView(value) {
            this.showOnCageViewField = value;
        }
        ///  <remarks/>
        get OrderInCageView() {
            return this.orderInCageViewField;
        }
        set OrderInCageView(value) {
            this.orderInCageViewField = value;
        }
        ///  <remarks/>
        get DefaultReportViewType() {
            return this.defaultReportViewTypeField;
        }
        set DefaultReportViewType(value) {
            this.defaultReportViewTypeField = value;
        }
        ///  <remarks/>
        get BarFunction() {
            return this.barFunctionField;
        }
        set BarFunction(value) {
            this.barFunctionField = value;
        }
        ///  <remarks/>
        get AxisXTitle() {
            return this.axisXTitleField;
        }
        set AxisXTitle(value) {
            this.axisXTitleField = value;
        }
        ///  <remarks/>
        get AxisYTitle() {
            return this.axisYTitleField;
        }
        set AxisYTitle(value) {
            this.axisYTitleField = value;
        }
        ///  <remarks/>
        get AxisXType() {
            return this.axisXTypeField;
        }
        set AxisXType(value) {
            this.axisXTypeField = value;
        }
        ///  <remarks/>
        get Description() {
            return this.descriptionField;
        }
        set Description(value) {
            this.descriptionField = value;
        }
        ///  <remarks/>
        get AggregationMethod() {
            return this.aggregationMethodField;
        }
        set AggregationMethod(value) {
            this.aggregationMethodField = value;
        }
    }
    Gemini.Report = Report;
    ///  <remarks/>
    class Series extends GeminiObject {
        constructor() {
            super();
            this.isThresholdField = false;
            this.aggTypeField = AggregationTypes.Avg;
        }
        ///  <remarks/>
        get SQL() {
            return this.sQLField;
        }
        set SQL(value) {
            this.sQLField = value;
        }
        ///  <remarks/>
        get CollectionItemUID() {
            return this.collectionItemUIDField;
        }
        set CollectionItemUID(value) {
            this.collectionItemUIDField = value;
        }
        ///  <remarks/>
        get LinkUID() {
            return this.linkUIDField;
        }
        set LinkUID(value) {
            this.linkUIDField = value;
        }
        ///  <remarks/>
        get IsThreshold() {
            return this.isThresholdField;
        }
        set IsThreshold(value) {
            this.isThresholdField = value;
        }
        ///  <remarks/>
        get AggType() {
            return this.aggTypeField;
        }
        set AggType(value) {
            this.aggTypeField = value;
        }
    }
    Gemini.Series = Series;
    ///  <remarks/>
    class SeriesSQL extends GeminiObject {
        ///  <remarks/>
        get ColumnStr() {
            return this.columnStrField;
        }
        set ColumnStr(value) {
            this.columnStrField = value;
        }
        ///  <remarks/>
        get TableName() {
            return this.tableNameField;
        }
        set TableName(value) {
            this.tableNameField = value;
        }
    }
    Gemini.SeriesSQL = SeriesSQL;
    ///  <remarks/>
    (function (AggregationTypes) {
        AggregationTypes[AggregationTypes["Avg"] = 0] = "Avg";
        AggregationTypes[AggregationTypes["Sum"] = 1] = "Sum";
        AggregationTypes[AggregationTypes["LastSample"] = 2] = "LastSample";
    })(Gemini.AggregationTypes || (Gemini.AggregationTypes = {}));
    var AggregationTypes = Gemini.AggregationTypes;
    ///  <remarks/>
    (function (ReportViewTypes) {
        ReportViewTypes[ReportViewTypes["Line"] = 0] = "Line";
        ReportViewTypes[ReportViewTypes["Bar"] = 1] = "Bar";
        ReportViewTypes[ReportViewTypes["Pie"] = 2] = "Pie";
        ReportViewTypes[ReportViewTypes["Area"] = 3] = "Area";
        ReportViewTypes[ReportViewTypes["Table"] = 4] = "Table";
    })(Gemini.ReportViewTypes || (Gemini.ReportViewTypes = {}));
    var ReportViewTypes = Gemini.ReportViewTypes;
    ///  <remarks/>
    class RelatedReport extends GeminiObject {
        constructor() {
            super();
            this.showByDefaultField = false;
        }
        ///  <remarks/>
        get ReportUID() {
            return this.reportUIDField;
        }
        set ReportUID(value) {
            this.reportUIDField = value;
        }
        ///  <remarks/>
        get ShowByDefault() {
            return this.showByDefaultField;
        }
        set ShowByDefault(value) {
            this.showByDefaultField = value;
        }
    }
    Gemini.RelatedReport = RelatedReport;
    ///  <remarks/>
    (function (NavigationCategories) {
        NavigationCategories[NavigationCategories["ManagedGroup"] = 0] = "ManagedGroup";
        NavigationCategories[NavigationCategories["ManagedGroups"] = 1] = "ManagedGroups";
        NavigationCategories[NavigationCategories["CPEGroup"] = 2] = "CPEGroup";
        NavigationCategories[NavigationCategories["Teleport"] = 3] = "Teleport";
        NavigationCategories[NavigationCategories["RFCluster"] = 4] = "RFCluster";
        NavigationCategories[NavigationCategories["NetworkSegment"] = 5] = "NetworkSegment";
        NavigationCategories[NavigationCategories["MasterNetworkSegment"] = 6] = "MasterNetworkSegment";
        NavigationCategories[NavigationCategories["SlaveNetworkSegment"] = 7] = "SlaveNetworkSegment";
        NavigationCategories[NavigationCategories["NetworkSegmentController"] = 8] = "NetworkSegmentController";
        NavigationCategories[NavigationCategories["HSP"] = 9] = "HSP";
        NavigationCategories[NavigationCategories["DPS"] = 10] = "DPS";
        NavigationCategories[NavigationCategories["IPM"] = 11] = "IPM";
        NavigationCategories[NavigationCategories["CPE"] = 12] = "CPE";
        NavigationCategories[NavigationCategories["MCR"] = 13] = "MCR";
        NavigationCategories[NavigationCategories["Satellite"] = 14] = "Satellite";
        NavigationCategories[NavigationCategories["Network"] = 15] = "Network";
        NavigationCategories[NavigationCategories["ALC"] = 16] = "ALC";
        NavigationCategories[NavigationCategories["SCPC"] = 17] = "SCPC";
        NavigationCategories[NavigationCategories["MCPC"] = 18] = "MCPC";
        NavigationCategories[NavigationCategories["Modulator"] = 19] = "Modulator";
        NavigationCategories[NavigationCategories["Demodulator"] = 20] = "Demodulator";
        NavigationCategories[NavigationCategories["GLT"] = 21] = "GLT";
        NavigationCategories[NavigationCategories["MLT"] = 22] = "MLT";
        NavigationCategories[NavigationCategories["SatTrooper"] = 23] = "SatTrooper";
        NavigationCategories[NavigationCategories["CCD"] = 24] = "CCD";
    })(Gemini.NavigationCategories || (Gemini.NavigationCategories = {}));
    var NavigationCategories = Gemini.NavigationCategories;
    ///  <remarks/>
    (function (Resolutions) {
        Resolutions[Resolutions["FiveMinutes"] = 0] = "FiveMinutes";
        Resolutions[Resolutions["OneHour"] = 1] = "OneHour";
        Resolutions[Resolutions["OneDay"] = 2] = "OneDay";
        Resolutions[Resolutions["OneWeek"] = 3] = "OneWeek";
        Resolutions[Resolutions["OneMonth"] = 4] = "OneMonth";
    })(Gemini.Resolutions || (Gemini.Resolutions = {}));
    var Resolutions = Gemini.Resolutions;
    ///  <remarks/>
    class Flag extends GeminiObject {
        ///  <remarks/>
        get Value() {
            return this.valueField;
        }
        set Value(value) {
            this.valueField = value;
        }
    }
    Gemini.Flag = Flag;
    ///  <remarks/>
    (function (ReportTabs) {
        ReportTabs[ReportTabs["Traffic"] = 0] = "Traffic";
        ReportTabs[ReportTabs["Performance"] = 1] = "Performance";
        ReportTabs[ReportTabs["Advanced"] = 2] = "Advanced";
    })(Gemini.ReportTabs || (Gemini.ReportTabs = {}));
    var ReportTabs = Gemini.ReportTabs;
    ///  <remarks/>
    (function (BarFunctions) {
        BarFunctions[BarFunctions["None"] = 0] = "None";
        BarFunctions[BarFunctions["AvgRound"] = 1] = "AvgRound";
        BarFunctions[BarFunctions["AvgTrunc"] = 2] = "AvgTrunc";
        BarFunctions[BarFunctions["Avg"] = 3] = "Avg";
        BarFunctions[BarFunctions["MinMaxAvg"] = 4] = "MinMaxAvg";
    })(Gemini.BarFunctions || (Gemini.BarFunctions = {}));
    var BarFunctions = Gemini.BarFunctions;
    ///  <remarks/>
    (function (AxisXTypes) {
        AxisXTypes[AxisXTypes["DateTime"] = 0] = "DateTime";
        AxisXTypes[AxisXTypes["String"] = 1] = "String";
        AxisXTypes[AxisXTypes["Integer"] = 2] = "Integer";
    })(Gemini.AxisXTypes || (Gemini.AxisXTypes = {}));
    var AxisXTypes = Gemini.AxisXTypes;
    ///  <remarks/>
    (function (RepAggregationMethod) {
        RepAggregationMethod[RepAggregationMethod["OnNSs"] = 0] = "OnNSs";
        RepAggregationMethod[RepAggregationMethod["OnNSByInstance"] = 1] = "OnNSByInstance";
        RepAggregationMethod[RepAggregationMethod["OnNSByNE"] = 2] = "OnNSByNE";
        RepAggregationMethod[RepAggregationMethod["OnMGByNS"] = 3] = "OnMGByNS";
        RepAggregationMethod[RepAggregationMethod["ONMG"] = 4] = "ONMG";
        RepAggregationMethod[RepAggregationMethod["OnMGByInstance"] = 5] = "OnMGByInstance";
        RepAggregationMethod[RepAggregationMethod["OnRFCByNS"] = 6] = "OnRFCByNS";
    })(Gemini.RepAggregationMethod || (Gemini.RepAggregationMethod = {}));
    var RepAggregationMethod = Gemini.RepAggregationMethod;
})(Gemini || (Gemini = {}));
//# sourceMappingURL=guixEntities.js.map