
namespace guixEntities {

    export abstract class UniqueItem {
        UID: string;
        Name: string;
    }

    export interface GuixNode extends UniqueItem {       
        GuixSection: any;
        GuixNode: GuixNode[];        
        Dependencies?: Dependencies;
    }

    export class GuixObject {
        Attached: string;
        Row: number;
    }

    export class GuixTableColumn {
        Attached: string;
    }

    export class GuixTable {
        Attached: string;
        Colspan: string;
        Row: string;
        GuixTableColumn: GuixTableColumn[];
    }

    export class GuixSection {
        UID: string;
        Name: string;
        GuixObject: GuixObject[];
        GuixTable: GuixTable;
    }

    export interface CClauseLeft {
        UID: string;
    }

    export interface CClauseRight {
        Absolute: string;
    }

    export interface CClause {
        ClauseLeft: CClauseLeft;
        Operand: ClauseOperand;
        ClauseRight: CClauseRight;
    }

    export interface CClauseGroup {
        Operand: ClauseLogicalOperand;
        Clause: CClause;
    }

    export interface CCondition {
        ClauseGroup: CClauseGroup;
    }

    export interface InactiveDependency {
        Condition: CCondition;
    }

    export interface Dependencies {
        InactiveDependency: InactiveDependency;
    }

   

    export interface Configuration {
        GuixNode: GuixNode[];
    }

    export interface Guix {
        Schema: string;
        Configuration: Configuration;
    }

    export interface RootObject {
        Guix: Guix;
    }

    export enum ClauseOperand{
        /// <remarks/>
        equal,
        
        /// <remarks/>
        notEqual,
        
        /// <remarks/>
        less,
        
        /// <remarks/>
        lessOrEqual,
        
        /// <remarks/>
        greater,
        
        /// <remarks/>
        greaterEqual
    }

    export enum ClauseLogicalOperand {
        
        /// <remarks/>
        and,
        
        /// <remarks/>
        or,
    }

}




// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by a tool.
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
//  
//  This source code was auto-generated by xsd, Version=4.0.30319.33440.
//  

module Gemini {

    export abstract class GeminiObject extends Object /*implements INotifyPropertyChanged*/ {
        
        //protected get Pack(): RepositoryPack {
        //}
        //protected set Pack(value: RepositoryPack) {
        //}
        
        //public get IsSingleton(): boolean {
        //}
        //public set IsSingleton(value: boolean) {
        //}

        //public constructor() {
        //    this.Pack = RepositoryPack.CurrentSerializingPack;
        //    this.IsSingleton = RepositoryPack.CurrentSerializingIsSingleton;
        //}

        //public /*event*/ PropertyChanged: System.ComponentModel.PropertyChangedEventHandler;

        //protected /* virtual */ RaisePropertyChanged(propertyName: string) {
        //    let propertyChanged: System.ComponentModel.PropertyChangedEventHandler = this.PropertyChanged;
        //    if ((propertyChanged != null)) {
        //        propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        //    }

        //}

        //public /* virtual */ FillDependencyObjects(dependencyObjects: List<IDependencyObject>) {

        //}

        //public /* virtual */ FillCompareTable(compareTable: Dictionary<string, List<CompareItem>>, generator: Generator) {

        //}

        //public /* virtual */ CreateCompareItem(parentUID: string, position: number): CompareItem {
        //    return new CompareItem();
        //}
    }

    
    export class SingletonLink extends LinkBase {
    }
    
    export /* abstract */ class LinkBase extends GeminiObject {

        private componentField: string;

        private versionField: string;

        private mergeField: boolean;

        private linkTelemetriesField: boolean;

        public constructor() {
            super();
            this.mergeField = false;
            this.linkTelemetriesField = true;
        }
        
        public get Component(): string {
            return this.componentField;
        }
    
        public set Component(value: string) {
            this.componentField = value;

        }
        
        ///  <remarks/>
    
        public get Version(): string {
            return this.versionField;
        }
    
        public set Version(value: string) {
            this.versionField = value;

        }
        
        public get Merge(): boolean {
            return this.mergeField;
        }
        public set Merge(value: boolean) {
            this.mergeField = value;

        }
        
        public get LinkTelemetries(): boolean {
            return this.linkTelemetriesField;
        }
        public set LinkTelemetries(value: boolean) {
            this.linkTelemetriesField = value;

        }
    }
    
    export /* abstract */ class Element extends GeminiObject {
    }
    
    export class MultilineTextOptions extends GeminiObject {

        private linesField: number;

        private wrapField: boolean;

        private widthFactorField: number;

        public constructor() {
            super();
            this.linesField = (<number>(6));
            this.wrapField = true;
            this.widthFactorField = (<number>(2));
        }
        
        public get Lines(): number {
            return this.linesField;
        }
        public set Lines(value: number) {
            this.linesField = value;

        }
        
        public get Wrap(): boolean {
            return this.wrapField;
        }
        public set Wrap(value: boolean) {
            this.wrapField = value;

        }
        
        ///  <remarks/>
        
        
        public get WidthFactor(): number {
            return this.widthFactorField;
        }
        
        
        public set WidthFactor(value: number) {
            this.widthFactorField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class NumericUpDown extends GeminiObject {

        private stepField: number;

        private allowDirectEditField: boolean;

        public constructor() {
            super();
            this.allowDirectEditField = false;
        }
        
        ///  <remarks/>
        
        
     
        public get Step(): number {
            return this.stepField;
        }
        
        
     
        public set Step(value: number) {
            this.stepField = value;

        }
        
        ///  <remarks/>
        
        
        public get AllowDirectEdit(): boolean {
            return this.allowDirectEditField;
        }
        
        
        public set AllowDirectEdit(value: boolean) {
            this.allowDirectEditField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class ValueConverterBase extends GeminiObject {

        private convertOperationField: ConvertOperation;

        private factorField: number;

        private overrideUnitsField: Units;

        private overrideUnitsFieldSpecified: boolean;
        
        ///  <remarks/>
        
        public get ConvertOperation(): ConvertOperation {
            return this.convertOperationField;
        }
        
        public set ConvertOperation(value: ConvertOperation) {
            this.convertOperationField = value;

        }
        
        ///  <remarks/>
        
        public get Factor(): number {
            return this.factorField;
        }
        
        public set Factor(value: number) {
            this.factorField = value;

        }
        
        ///  <remarks/>
        
        public get OverrideUnits(): Units {
            return this.overrideUnitsField;
        }
        
        public set OverrideUnits(value: Units) {
            this.overrideUnitsField = value;

        }
        
        ///  <remarks/>
        
        public get OverrideUnitsSpecified(): boolean {
            return this.overrideUnitsFieldSpecified;
        }
        
        public set OverrideUnitsSpecified(value: boolean) {
            this.overrideUnitsFieldSpecified = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum ConvertOperation {

        multiplication,

        division,
    }
    
    ///  <remarks/>
    
    
    export enum Units {



        Empty,



        BBsegment,



        COMMbuff,



        MPEGframes,

        TS,



        TSSS,



        Percent,

        PCR32,


        Item27MHzticks,



        EsN0dB,



        CN0dB,

        cm,

        Km,

        packets,

        bursts,

        symbols,



        Item01dB,



        Item001dB,

        dB,



        Item01dBmHz,

        dBm,

        degrees,



        C,



        dBmHz,

        hours,

        minutes,

        sec,

        ms,



        Item10ms,

        s,

        Hz,

        KHz,

        MHz,

        GHz,

        bytes,

        KB,

        MB,

        GB,

        bps,

        Kbps,

        pps,

        sps,

        Ksps,

        ppm,

        Mbps,

        mA,

        W,

        mW,

        V,
    }
    
    ///  <remarks/>
    
    
    export class ValueConverter extends ValueConverterBase {
    }
    
    ///  <remarks/>
    
    
    
    export /* abstract */ class AttachedMibxItem extends GeminiObject {

        private attachedField: string;

        private uIDField: string;

        private displayNameField: string;
        
        ///  <remarks/>
        
        public get Attached(): string {
            return this.attachedField;
        }
        
        public set Attached(value: string) {
            this.attachedField = value;

        }
        
        ///  <remarks/>
        
        public get UID(): string {
            return this.uIDField;
        }
        
        public set UID(value: string) {
            this.uIDField = value;

        }
        
        ///  <remarks/>
        
        public get DisplayName(): string {
            return this.displayNameField;
        }
        
        public set DisplayName(value: string) {
            this.displayNameField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class GuixItem extends AttachedMibxItem {

        private columnField: number;

        private colspanField: number;

        private rowField: number;

        private rowspanField: number;

        public constructor() {
            super();
            this.columnField = 0;
            this.colspanField = 1;
            this.rowField = 0;
            this.rowspanField = 1;
        }
        
        ///  <remarks/>
        
        
        public get Column(): number {
            return this.columnField;
        }
        
        
        public set Column(value: number) {
            this.columnField = value;

        }
        
        ///  <remarks/>
        
        
        public get Colspan(): number {
            return this.colspanField;
        }
        
        
        public set Colspan(value: number) {
            this.colspanField = value;

        }
        
        ///  <remarks/>
        
        
        public get Row(): number {
            return this.rowField;
        }
        
        
        public set Row(value: number) {
            this.rowField = value;

        }
        
        ///  <remarks/>
        
        
        public get Rowspan(): number {
            return this.rowspanField;
        }
        
        
        public set Rowspan(value: number) {
            this.rowspanField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class ReplacePattern extends GeminiObject {

        private keyValueField: KeyValue[];
        
        ///  <remarks/>
        
        public get KeyValue(): KeyValue[] {
            return this.keyValueField;
        }
        
        public set KeyValue(value: KeyValue[]) {
            this.keyValueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class KeyValue extends GeminiObject {

        private keyField: string;

        private valueField: string;
        
        ///  <remarks/>
        
        public get Key(): string {
            return this.keyField;
        }
        
        public set Key(value: string) {
            this.keyField = value;

        }
        
        ///  <remarks/>
        
        public get Value(): string {
            return this.valueField;
        }
        
        public set Value(value: string) {
            this.valueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export /* abstract */ class RangeBase extends GeminiObject {

        private uIDField: string;

        private minField: number;

        private maxField: number;

        private maxFieldSpecified: boolean;
        
        ///  <remarks/>
        
        public get UID(): string {
            return this.uIDField;
        }
        
        public set UID(value: string) {
            this.uIDField = value;

        }
        
        ///  <remarks/>
        
        public get Min(): number {
            return this.minField;
        }
        
        public set Min(value: number) {
            this.minField = value;

        }
        
        ///  <remarks/>
        
        public get Max(): number {
            return this.maxField;
        }
        
        public set Max(value: number) {
            this.maxField = value;

        }
        
        ///  <remarks/>
        
        public get MaxSpecified(): boolean {
            return this.maxFieldSpecified;
        }
        
        public set MaxSpecified(value: boolean) {
            this.maxFieldSpecified = value;

        }
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class EnumBase extends RangeBase {
    }
    
    ///  <remarks/>
    
    
    export class CapabilityClause extends GeminiObject {

        private pathField: string;

        private levelField: CapabilityLevel;
        
        ///  <remarks/>
        
        public get Path(): string {
            return this.pathField;
        }
        
        public set Path(value: string) {
            this.pathField = value;

        }
        
        ///  <remarks/>
        
        public get Level(): CapabilityLevel {
            return this.levelField;
        }
        
        public set Level(value: CapabilityLevel) {
            this.levelField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum CapabilityLevel {

        global,

        folder,

        element,
    }
    
    ///  <remarks/>
   
    
    
    export /* abstract */ class Dependency extends GeminiObject {

        private conditionField: Condition;
        
        ///  <remarks/>
        public get Condition(): Condition {
            return this.conditionField;
        }
        public set Condition(value: Condition) {
            this.conditionField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Condition extends GeminiObject {

        private clauseGroupField: ClauseGroup;
        
        ///  <remarks/>
        public get ClauseGroup(): ClauseGroup {
            return this.clauseGroupField;
        }
        public set ClauseGroup(value: ClauseGroup) {
            this.clauseGroupField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class ClauseGroup extends GeminiObject {

        private itemsField: Object[];

        private operandField: ClauseLogicalOperand;

        public constructor() {
            super();
            this.operandField = ClauseLogicalOperand.or;
        }
        
        ///  <remarks/>
        
        
        public get Items(): Object[] {
            return this.itemsField;
        }
        
        
        public set Items(value: Object[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>
        
        
        public get Operand(): ClauseLogicalOperand {
            return this.operandField;
        }
        
        
        public set Operand(value: ClauseLogicalOperand) {
            this.operandField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Clause extends GeminiObject {

        private clauseLeftField: ClauseLeft;

        private operandField: ClauseOperand;

        private clauseRightField: ClauseRight;
        
        ///  <remarks/>
        public get ClauseLeft(): ClauseLeft {
            return this.clauseLeftField;
        }
        public set ClauseLeft(value: ClauseLeft) {
            this.clauseLeftField = value;

        }
        
        ///  <remarks/>
        public get Operand(): ClauseOperand {
            return this.operandField;
        }
        public set Operand(value: ClauseOperand) {
            this.operandField = value;

        }
        
        ///  <remarks/>
        public get ClauseRight(): ClauseRight {
            return this.clauseRightField;
        }
        public set ClauseRight(value: ClauseRight) {
            this.clauseRightField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class ClauseLeft extends GeminiObject {

        private itemField: Object;
        
        ///  <remarks/>
        
        
        public get Item(): Object {
            return this.itemField;
        }
        
        
        public set Item(value: Object) {
            this.itemField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum ClauseOperand {

        equal,

        notEqual,

        less,

        lessOrEqual,

        greater,

        greaterEqual,
    }
    
    ///  <remarks/>
    
    
    
    export class ClauseRight extends GeminiObject {

        private itemField: string;

        private itemElementNameField: ItemChoiceType;
        
        ///  <remarks/>
        
        
        
        public get Item(): string {
            return this.itemField;
        }
        
        
        
        public set Item(value: string) {
            this.itemField = value;

        }
        
        ///  <remarks/>
        
        public get ItemElementName(): ItemChoiceType {
            return this.itemElementNameField;
        }
        
        public set ItemElementName(value: ItemChoiceType) {
            this.itemElementNameField = value;

        }
    }
    
    ///  <remarks/>
        
    export enum ItemChoiceType {

        Absolute,

        UID,
    }
    
    ///  <remarks/>
    
    
    export enum ClauseLogicalOperand {

        and,

        or,
    }
    
    ///  <remarks/>
    
    
    export class DisableStartsProcessDependency extends Dependency {
    }
    
    ///  <remarks/>
    
    
    export class ChangeStatusDependency extends Dependency {

        private statusField: Status;

        public constructor() {
            super();
            this.statusField = Status.optional;
        }
        
        ///  <remarks/>
        
        
        public get Status(): Status {
            return this.statusField;
        }
        
        
        public set Status(value: Status) {
            this.statusField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum Status {

        optional,

        mandatory,

        obsolete,
    }
    
    ///  <remarks/>
    
    
    export class RangeDependency extends Dependency {

        private endUIDField: string;
        
        ///  <remarks/>
        
        public get EndUID(): string {
            return this.endUIDField;
        }
        
        public set EndUID(value: string) {
            this.endUIDField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    
    export class BaseInactiveDependency extends Dependency {
    }
    
    ///  <remarks/>
    
    
    export class GuixInactiveDependency extends BaseInactiveDependency {
    }
    
    ///  <remarks/>
    
    
    export class InactiveDependency extends BaseInactiveDependency {
    }
    
    ///  <remarks/>
    
    
    
    export /* abstract */ class UniqueItem extends GeminiObject {

        private uIDField: string;

        private nameField: string;
        
        ///  <remarks/>
        
        public get UID(): string {
            return this.uIDField;
        }
        
        public set UID(value: string) {
            this.uIDField = value;

        }
        
        ///  <remarks/>
        
        public get Name(): string {
            return this.nameField;
        }
        
        public set Name(value: string) {
            this.nameField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class GuixGroup extends UniqueItem {

        private itemsField: GuixItem[];

        private rowField: number;

        public constructor() {
            super();
            this.rowField = 0;
        }
        
        ///  <remarks/>
        
        
        public get Items(): GuixItem[] {
            return this.itemsField;
        }
        
        
        public set Items(value: GuixItem[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>
        
        
        public get Row(): number {
            return this.rowField;
        }
        
        
        public set Row(value: number) {
            this.rowField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixObject extends GuixItem {

        private guixPresentationField: GuixPresentation;
        
        ///  <remarks/>
        public get GuixPresentation(): GuixPresentation {
            return this.guixPresentationField;
        }
        public set GuixPresentation(value: GuixPresentation) {
            this.guixPresentationField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixPresentation extends GeminiObject {

        private valueConverterField: ValueConverter;

        private numericUpDownField: NumericUpDown;

        private multilineTextOptionsField: MultilineTextOptions;

        private isMultilineTextField: boolean;

        private isUrlField: boolean;

        private doNotConvertToLocalTimeField: boolean;

        private showAsProfileSelectorField: boolean;

        private isPasswordFieldField: boolean;

        public constructor() {
            super();
            this.isMultilineTextField = false;
            this.isUrlField = false;
            this.doNotConvertToLocalTimeField = false;
            this.showAsProfileSelectorField = false;
            this.isPasswordFieldField = false;
        }
        
        ///  <remarks/>
        public get ValueConverter(): ValueConverter {
            return this.valueConverterField;
        }
        public set ValueConverter(value: ValueConverter) {
            this.valueConverterField = value;

        }
        
        ///  <remarks/>
        public get NumericUpDown(): NumericUpDown {
            return this.numericUpDownField;
        }
        public set NumericUpDown(value: NumericUpDown) {
            this.numericUpDownField = value;

        }
        
        ///  <remarks/>
        public get MultilineTextOptions(): MultilineTextOptions {
            return this.multilineTextOptionsField;
        }
        public set MultilineTextOptions(value: MultilineTextOptions) {
            this.multilineTextOptionsField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsMultilineText(): boolean {
            return this.isMultilineTextField;
        }
        
        
        public set IsMultilineText(value: boolean) {
            this.isMultilineTextField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsUrl(): boolean {
            return this.isUrlField;
        }
        
        
        public set IsUrl(value: boolean) {
            this.isUrlField = value;

        }
        
        ///  <remarks/>
        
        
        public get DoNotConvertToLocalTime(): boolean {
            return this.doNotConvertToLocalTimeField;
        }
        
        
        public set DoNotConvertToLocalTime(value: boolean) {
            this.doNotConvertToLocalTimeField = value;

        }
        
        ///  <remarks/>
        
        
        public get ShowAsProfileSelector(): boolean {
            return this.showAsProfileSelectorField;
        }
        
        
        public set ShowAsProfileSelector(value: boolean) {
            this.showAsProfileSelectorField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsPasswordField(): boolean {
            return this.isPasswordFieldField;
        }
        
        
        public set IsPasswordField(value: boolean) {
            this.isPasswordFieldField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixTable extends GuixItem {

        private guixTableColumnField: GuixTableColumn[];

        private innerGuixTableField: GuixTable[];

        private commandsField: Commands;

        private columnGroupField: ColumnGroup[];

        private hideIndexField: boolean;

        private defaultMaxRepetitionsField: number;

        private isSingleRowTableField: boolean;

        private doNotExpandField: boolean;

        public constructor() {
            super();
            this.hideIndexField = false;
            this.defaultMaxRepetitionsField = 10;
            this.isSingleRowTableField = false;
            this.doNotExpandField = false;
        }
        
        ///  <remarks/>
        
        public get GuixTableColumn(): GuixTableColumn[] {
            return this.guixTableColumnField;
        }
        
        public set GuixTableColumn(value: GuixTableColumn[]) {
            this.guixTableColumnField = value;

        }
        
        ///  <remarks/>
        
        public get InnerGuixTable(): GuixTable[] {
            return this.innerGuixTableField;
        }
        
        public set InnerGuixTable(value: GuixTable[]) {
            this.innerGuixTableField = value;

        }
        
        ///  <remarks/>
        public get Commands(): Commands {
            return this.commandsField;
        }
        public set Commands(value: Commands) {
            this.commandsField = value;

        }
        
        ///  <remarks/>
        
        public get ColumnGroup(): ColumnGroup[] {
            return this.columnGroupField;
        }
        
        public set ColumnGroup(value: ColumnGroup[]) {
            this.columnGroupField = value;

        }
        
        ///  <remarks/>
        
        
        public get HideIndex(): boolean {
            return this.hideIndexField;
        }
        
        
        public set HideIndex(value: boolean) {
            this.hideIndexField = value;

        }
        
        ///  <remarks/>
        
        
        public get DefaultMaxRepetitions(): number {
            return this.defaultMaxRepetitionsField;
        }
        
        
        public set DefaultMaxRepetitions(value: number) {
            this.defaultMaxRepetitionsField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsSingleRowTable(): boolean {
            return this.isSingleRowTableField;
        }
        
        
        public set IsSingleRowTable(value: boolean) {
            this.isSingleRowTableField = value;

        }
        
        ///  <remarks/>
        
        
        public get DoNotExpand(): boolean {
            return this.doNotExpandField;
        }
        
        
        public set DoNotExpand(value: boolean) {
            this.doNotExpandField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixTableColumn extends AttachedMibxItem {

        private guixPresentationField: GuixPresentation;

        private groupUIDField: string;

        private isSingleRowTableNameField: boolean;

        public constructor() {
            super();
            this.isSingleRowTableNameField = false;
        }
        
        ///  <remarks/>
        public get GuixPresentation(): GuixPresentation {
            return this.guixPresentationField;
        }
        public set GuixPresentation(value: GuixPresentation) {
            this.guixPresentationField = value;

        }
        
        ///  <remarks/>
        
        public get GroupUID(): string {
            return this.groupUIDField;
        }
        
        public set GroupUID(value: string) {
            this.groupUIDField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsSingleRowTableName(): boolean {
            return this.isSingleRowTableNameField;
        }
        
        
        public set IsSingleRowTableName(value: boolean) {
            this.isSingleRowTableNameField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Commands extends GeminiObject {

        private itemsField: Object[];
        
        ///  <remarks/>
        
        public get Items(): Object[] {
            return this.itemsField;
        }
        
        public set Items(value: Object[]) {
            this.itemsField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixCommand extends UniqueItem {

        private guixPrimaryCommandObjectField: GuixPrimaryCommandObject;

        private guixCommandParameterField: GuixCommandParameter[];

        private valueField: string;

        private attachToRowInstanceField: boolean;

        private uIAccessLevelField: UIAccessLevel;

        private quickAccessField: boolean;

        private useInBulkField: boolean;

        public constructor() {
            super();
            this.attachToRowInstanceField = false;
            this.uIAccessLevelField = UIAccessLevel.normal;
            this.quickAccessField = false;
            this.useInBulkField = true;
        }
        
        ///  <remarks/>
        public get GuixPrimaryCommandObject(): GuixPrimaryCommandObject {
            return this.guixPrimaryCommandObjectField;
        }
        public set GuixPrimaryCommandObject(value: GuixPrimaryCommandObject) {
            this.guixPrimaryCommandObjectField = value;

        }
        
        ///  <remarks/>

        public get GuixCommandParameter(): GuixCommandParameter[] {
            return this.guixCommandParameterField;
        }

        public set GuixCommandParameter(value: GuixCommandParameter[]) {
            this.guixCommandParameterField = value;

        }
        
        ///  <remarks/>
        
        public get Value(): string {
            return this.valueField;
        }
        
        public set Value(value: string) {
            this.valueField = value;

        }
        
        ///  <remarks/>
        
        
        public get AttachToRowInstance(): boolean {
            return this.attachToRowInstanceField;
        }
        
        
        public set AttachToRowInstance(value: boolean) {
            this.attachToRowInstanceField = value;

        }
        
        ///  <remarks/>
        

        public get UIAccessLevel(): UIAccessLevel {
            return this.uIAccessLevelField;
        }
        

        public set UIAccessLevel(value: UIAccessLevel) {
            this.uIAccessLevelField = value;

        }
        
        ///  <remarks/>
        
        
        public get QuickAccess(): boolean {
            return this.quickAccessField;
        }
        
        
        public set QuickAccess(value: boolean) {
            this.quickAccessField = value;

        }
        
        ///  <remarks/>
        

        public get UseInBulk(): boolean {
            return this.useInBulkField;
        }
        

        public set UseInBulk(value: boolean) {
            this.useInBulkField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixPrimaryCommandObject extends AttachedMibxItem {
    }
    
    ///  <remarks/>
    
    
    
    export class GuixCommandParameter extends AttachedMibxItem {

        private guixPresentationField: GuixPresentation;
        
        ///  <remarks/>
        public get GuixPresentation(): GuixPresentation {
            return this.guixPresentationField;
        }
        public set GuixPresentation(value: GuixPresentation) {
            this.guixPresentationField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum UIAccessLevel {

        normal,

        tech,
    }
    
    ///  <remarks/>
    
    
    
    export class GuixCommandNode extends UniqueItem {

        private itemsField: Object[];

        private uIAccessLevelField: UIAccessLevel;

        public constructor() {
            super();
            this.uIAccessLevelField = UIAccessLevel.normal;
        }
        
        ///  <remarks/>





        public get Items(): Object[] {
            return this.itemsField;
        }





        public set Items(value: Object[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>
        

        public get UIAccessLevel(): UIAccessLevel {
            return this.uIAccessLevelField;
        }
        

        public set UIAccessLevel(value: UIAccessLevel) {
            this.uIAccessLevelField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixCommandSeparator extends Element {
    }
    
    ///  <remarks/>
    
    
    
    export class LinkedGuixCommand extends GeminiObject {

        private commandUIDField: string;
        
        ///  <remarks/>
        
        public get CommandUID(): string {
            return this.commandUIDField;
        }
        
        public set CommandUID(value: string) {
            this.commandUIDField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class LinkedGuixCommandNode extends GeminiObject {

        private commandNodeUIDField: string;
        
        ///  <remarks/>
        
        public get CommandNodeUID(): string {
            return this.commandNodeUIDField;
        }
        
        public set CommandNodeUID(value: string) {
            this.commandNodeUIDField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class ColumnGroup extends UniqueItem {
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class EventBase extends UniqueItem {

        private descriptionField: string;

        private argField: string[];

        private idField: number;

        private categoryField: number;

        private typeField: number;

        private versionField: number;

        private severityField: Severity;

        private exportToCField: boolean;

        public constructor() {
            super();
            this.exportToCField = true;
        }
        
        ///  <remarks/>

        public get Description(): string {
            return this.descriptionField;
        }

        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>

        public get Arg(): string[] {
            return this.argField;
        }

        public set Arg(value: string[]) {
            this.argField = value;

        }
        
        ///  <remarks/>
        
        public get ID(): number {
            return this.idField;
        }
        
        public set ID(value: number) {
            this.idField = value;

        }
        
        ///  <remarks/>
        
        public get Category(): number {
            return this.categoryField;
        }
        
        public set Category(value: number) {
            this.categoryField = value;

        }
        
        ///  <remarks/>
        
        public get Type(): number {
            return this.typeField;
        }
        
        public set Type(value: number) {
            this.typeField = value;

        }
        
        ///  <remarks/>
        
        public get Version(): number {
            return this.versionField;
        }
        
        public set Version(value: number) {
            this.versionField = value;

        }
        
        ///  <remarks/>
        
        public get Severity(): Severity {
            return this.severityField;
        }
        
        public set Severity(value: Severity) {
            this.severityField = value;

        }
        
        ///  <remarks/>
        

        public get ExportToC(): boolean {
            return this.exportToCField;
        }
        

        public set ExportToC(value: boolean) {
            this.exportToCField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum Severity {

        information,

        normal,

        warning,

        minor,

        major,

        critical,
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class HealthRule extends UniqueItem {

        private descriptionField: string;

        private conditionField: Condition;

        private severityField: Severity;

        private severityAfterField: Severity;

        private waitPeriodField: number;

        private intervalField: number;

        private timeoutField: number;

        private retriesField: number;

        private eventIDField: number;

        public constructor() {
            super();
            this.waitPeriodField = 0;
            this.intervalField = 60;
            this.timeoutField = 1;
            this.retriesField = 1;
        }
        
        ///  <remarks/>

        public get Description(): string {
            return this.descriptionField;
        }

        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>

        public get Condition(): Condition {
            return this.conditionField;
        }

        public set Condition(value: Condition) {
            this.conditionField = value;

        }
        
        ///  <remarks/>
        
        public get Severity(): Severity {
            return this.severityField;
        }
        
        public set Severity(value: Severity) {
            this.severityField = value;

        }
        
        ///  <remarks/>
        
        public get SeverityAfter(): Severity {
            return this.severityAfterField;
        }
        
        public set SeverityAfter(value: Severity) {
            this.severityAfterField = value;

        }
        
        ///  <remarks/>
        
        
        public get WaitPeriod(): number {
            return this.waitPeriodField;
        }
        
        
        public set WaitPeriod(value: number) {
            this.waitPeriodField = value;

        }
        
        ///  <remarks/>
        

        public get Interval(): number {
            return this.intervalField;
        }
        

        public set Interval(value: number) {
            this.intervalField = value;

        }
        
        ///  <remarks/>
        
        
        public get Timeout(): number {
            return this.timeoutField;
        }
        
        
        public set Timeout(value: number) {
            this.timeoutField = value;

        }
        
        ///  <remarks/>
        
        
        public get Retries(): number {
            return this.retriesField;
        }
        
        
        public set Retries(value: number) {
            this.retriesField = value;

        }
        
        ///  <remarks/>
        
        public get EventID(): number {
            return this.eventIDField;
        }
        
        public set EventID(value: number) {
            this.eventIDField = value;

        }
    }       
    
    export /* abstract */ class MibxItem extends UniqueItem {

        private descriptionField: string;

        private devNoteField: string;

        private devNote2Field: string;

        private devNote3Field: string;

        private devNote4Field: string;

        private mibNameField: string;

        private idField: number;

        private oIDField: string;

        private statusField: Status;

        private exportToMibField: boolean;

        private exportToCField: boolean;

        private supportedInField: SupportedIn;

        private exportToJavaField: boolean;

        public constructor() {
            super();
            this.statusField = Status.optional;
            this.exportToMibField = true;
            this.exportToCField = true;
            this.supportedInField = SupportedIn.operational;
            this.exportToJavaField = true;
        }
        
        ///  <remarks/>

        public get Description(): string {
            return this.descriptionField;
        }

        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>
        public get DevNote(): string {
            return this.devNoteField;
        }
        public set DevNote(value: string) {
            this.devNoteField = value;

        }
        
        ///  <remarks/>
        public get DevNote2(): string {
            return this.devNote2Field;
        }
        public set DevNote2(value: string) {
            this.devNote2Field = value;

        }
        
        ///  <remarks/>
        public get DevNote3(): string {
            return this.devNote3Field;
        }
        public set DevNote3(value: string) {
            this.devNote3Field = value;

        }
        
        ///  <remarks/>
        public get DevNote4(): string {
            return this.devNote4Field;
        }
        public set DevNote4(value: string) {
            this.devNote4Field = value;

        }
        
        ///  <remarks/>
        
        public get MibName(): string {
            return this.mibNameField;
        }
        
        public set MibName(value: string) {
            this.mibNameField = value;

        }
        
        ///  <remarks/>
        
        public get ID(): number {
            return this.idField;
        }
        
        public set ID(value: number) {
            this.idField = value;

        }
        
        ///  <remarks/>
        
        public get OID(): string {
            return this.oIDField;
        }
        
        public set OID(value: string) {
            this.oIDField = value;

        }
        
        ///  <remarks/>
        
        
        public get Status(): Status {
            return this.statusField;
        }
        
        
        public set Status(value: Status) {
            this.statusField = value;

        }
        
        ///  <remarks/>
        

        public get ExportToMib(): boolean {
            return this.exportToMibField;
        }
        

        public set ExportToMib(value: boolean) {
            this.exportToMibField = value;

        }
        
        ///  <remarks/>
        

        public get ExportToC(): boolean {
            return this.exportToCField;
        }
        

        public set ExportToC(value: boolean) {
            this.exportToCField = value;

        }
        
        ///  <remarks/>
        

        public get SupportedIn(): SupportedIn {
            return this.supportedInField;
        }
        

        public set SupportedIn(value: SupportedIn) {
            this.supportedInField = value;

        }
        
        ///  <remarks/>
        

        public get ExportToJava(): boolean {
            return this.exportToJavaField;
        }
        

        public set ExportToJava(value: boolean) {
            this.exportToJavaField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum SupportedIn {

        operational,

        boot,

        both,
    }
    
    ///  <remarks/>
    
    
    
    export /* abstract */ class MibxObject extends MibxItem {

        private transportField: Transport;

        private dependenciesField: Dependencies;

        private maxAccessField: MibMaxAccess;

        private readAccessField: AccessLevel;

        private writeAccessField: AccessLevel;

        private modeField: ObjectMode;

        private serviceInterruptionField: ServiceInterruption;

        public constructor() {
            super();
            this.maxAccessField = MibMaxAccess.readonly;
            this.readAccessField = AccessLevel.guest;
            this.writeAccessField = AccessLevel.operator;
            this.modeField = ObjectMode.none;
            this.serviceInterruptionField = ServiceInterruption.reset;
        }
        
        ///  <remarks/>
        public get Transport(): Transport {
            return this.transportField;
        }
        public set Transport(value: Transport) {
            this.transportField = value;

        }
        
        ///  <remarks/>
        public get Dependencies(): Dependencies {
            return this.dependenciesField;
        }
        public set Dependencies(value: Dependencies) {
            this.dependenciesField = value;

        }
        
        ///  <remarks/>
        

        public get MaxAccess(): MibMaxAccess {
            return this.maxAccessField;
        }
        

        public set MaxAccess(value: MibMaxAccess) {
            this.maxAccessField = value;

        }
        
        ///  <remarks/>
        

        public get ReadAccess(): AccessLevel {
            return this.readAccessField;
        }
        

        public set ReadAccess(value: AccessLevel) {
            this.readAccessField = value;

        }
        
        ///  <remarks/>
        

        public get WriteAccess(): AccessLevel {
            return this.writeAccessField;
        }
        

        public set WriteAccess(value: AccessLevel) {
            this.writeAccessField = value;

        }
        
        ///  <remarks/>
        

        public get Mode(): ObjectMode {
            return this.modeField;
        }
        

        public set Mode(value: ObjectMode) {
            this.modeField = value;

        }
        
        ///  <remarks/>
        

        public get ServiceInterruption(): ServiceInterruption {
            return this.serviceInterruptionField;
        }
        

        public set ServiceInterruption(value: ServiceInterruption) {
            this.serviceInterruptionField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Transport extends GeminiObject {

        private sequenceField: number;

        private sequenceFieldSpecified: boolean;

        private pDUSequenceField: number;

        private pDUSequenceFieldSpecified: boolean;
        
        ///  <remarks/>
        
        public get Sequence(): number {
            return this.sequenceField;
        }
        
        public set Sequence(value: number) {
            this.sequenceField = value;

        }
        
        ///  <remarks/>
        
        public get SequenceSpecified(): boolean {
            return this.sequenceFieldSpecified;
        }
        
        public set SequenceSpecified(value: boolean) {
            this.sequenceFieldSpecified = value;

        }
        
        ///  <remarks/>
        
        public get PDUSequence(): number {
            return this.pDUSequenceField;
        }
        
        public set PDUSequence(value: number) {
            this.pDUSequenceField = value;

        }
        
        ///  <remarks/>
        
        public get PDUSequenceSpecified(): boolean {
            return this.pDUSequenceFieldSpecified;
        }
        
        public set PDUSequenceSpecified(value: boolean) {
            this.pDUSequenceFieldSpecified = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Dependencies extends GeminiObject {

        private inactiveDependencyField: InactiveDependency[];

        private setValueDependencyField: SetValueDependency[];

        private limitsDependencyField: LimitsDependency[];

        private licenseDependencyField: LicenseDependency[];

        private tableLimitsDependencyField: TableLimitsDependency[];

        private readOnlyDependencyField: ReadOnlyDependency[];

        private rangeDependencyField: RangeDependency[];

        private changeStatusDependencyField: ChangeStatusDependency[];

        private disableStartsProcessDependencyField: DisableStartsProcessDependency[];
        
        ///  <remarks/>

        public get InactiveDependency(): InactiveDependency[] {
            return this.inactiveDependencyField;
        }

        public set InactiveDependency(value: InactiveDependency[]) {
            this.inactiveDependencyField = value;

        }
        
        ///  <remarks/>

        public get SetValueDependency(): SetValueDependency[] {
            return this.setValueDependencyField;
        }

        public set SetValueDependency(value: SetValueDependency[]) {
            this.setValueDependencyField = value;

        }
        
        ///  <remarks/>

        public get LimitsDependency(): LimitsDependency[] {
            return this.limitsDependencyField;
        }

        public set LimitsDependency(value: LimitsDependency[]) {
            this.limitsDependencyField = value;

        }
        
        ///  <remarks/>

        public get LicenseDependency(): LicenseDependency[] {
            return this.licenseDependencyField;
        }

        public set LicenseDependency(value: LicenseDependency[]) {
            this.licenseDependencyField = value;

        }
        
        ///  <remarks/>

        public get TableLimitsDependency(): TableLimitsDependency[] {
            return this.tableLimitsDependencyField;
        }

        public set TableLimitsDependency(value: TableLimitsDependency[]) {
            this.tableLimitsDependencyField = value;

        }
        
        ///  <remarks/>

        public get ReadOnlyDependency(): ReadOnlyDependency[] {
            return this.readOnlyDependencyField;
        }

        public set ReadOnlyDependency(value: ReadOnlyDependency[]) {
            this.readOnlyDependencyField = value;

        }
        
        ///  <remarks/>

        public get RangeDependency(): RangeDependency[] {
            return this.rangeDependencyField;
        }

        public set RangeDependency(value: RangeDependency[]) {
            this.rangeDependencyField = value;

        }
        
        ///  <remarks/>

        public get ChangeStatusDependency(): ChangeStatusDependency[] {
            return this.changeStatusDependencyField;
        }

        public set ChangeStatusDependency(value: ChangeStatusDependency[]) {
            this.changeStatusDependencyField = value;

        }
        
        ///  <remarks/>

        public get DisableStartsProcessDependency(): DisableStartsProcessDependency[] {
            return this.disableStartsProcessDependencyField;
        }

        public set DisableStartsProcessDependency(value: DisableStartsProcessDependency[]) {
            this.disableStartsProcessDependencyField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class SetValueDependency extends Dependency {

        private setValueField: SetValue;
        
        ///  <remarks/>
        public get SetValue(): SetValue {
            return this.setValueField;
        }
        public set SetValue(value: SetValue) {
            this.setValueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class SetValue extends GeminiObject {

        private itemField: string;

        private itemElementNameField: ItemChoiceType1;
        
        ///  <remarks/>
        
        
        
        public get Item(): string {
            return this.itemField;
        }
        
        
        
        public set Item(value: string) {
            this.itemField = value;

        }
        
        ///  <remarks/>
        
        public get ItemElementName(): ItemChoiceType1 {
            return this.itemElementNameField;
        }
        
        public set ItemElementName(value: ItemChoiceType1) {
            this.itemElementNameField = value;

        }
    }
    
    ///  <remarks/>
    
   
    export enum ItemChoiceType1 {

        Absolute,

        UID,
    }
    
    ///  <remarks/>
    
    
    
    export class LimitsDependency extends Dependency {

        private limitIdField: string[];

        private allowField: boolean;

        public constructor() {
            super();
            this.allowField = true;
        }
        
        ///  <remarks/>

        public get LimitId(): string[] {
            return this.limitIdField;
        }

        public set LimitId(value: string[]) {
            this.limitIdField = value;

        }
        
        ///  <remarks/>
        

        public get Allow(): boolean {
            return this.allowField;
        }
        

        public set Allow(value: boolean) {
            this.allowField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class LicenseDependency extends Dependency {

        private licenseCodeField: string;
        
        ///  <remarks/>
        
        public get LicenseCode(): string {
            return this.licenseCodeField;
        }
        
        public set LicenseCode(value: string) {
            this.licenseCodeField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class TableLimitsDependency extends Dependency {

        private minRowsField: number;

        private maxRowsField: number;

        private maxRowsFieldSpecified: boolean;

        private minRowsLookupField: string;

        private maxRowsLookupField: string;

        public constructor() {
            super();
            this.minRowsField = 0;
        }
        
        ///  <remarks/>
        public get MinRows(): number {
            return this.minRowsField;
        }
        public set MinRows(value: number) {
            this.minRowsField = value;

        }
        
        ///  <remarks/>
        public get MaxRows(): number {
            return this.maxRowsField;
        }
        public set MaxRows(value: number) {
            this.maxRowsField = value;

        }
        
        ///  <remarks/>
        
        public get MaxRowsSpecified(): boolean {
            return this.maxRowsFieldSpecified;
        }
        
        public set MaxRowsSpecified(value: boolean) {
            this.maxRowsFieldSpecified = value;

        }
        
        ///  <remarks/>
        public get MinRowsLookup(): string {
            return this.minRowsLookupField;
        }
        public set MinRowsLookup(value: string) {
            this.minRowsLookupField = value;

        }
        
        ///  <remarks/>
        public get MaxRowsLookup(): string {
            return this.maxRowsLookupField;
        }
        public set MaxRowsLookup(value: string) {
            this.maxRowsLookupField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class ReadOnlyDependency extends Dependency {
    }
    
    ///  <remarks/>
    

    export enum MibMaxAccess {



        notaccessible,


        accessiblefornotify,



        readonly,



        readwrite,



        readcreate,
    }
    
    ///  <remarks/>
    
    
    export enum AccessLevel {

        guest,

        user,

        operator,

        admin,

        supervisor,

        tech,

       
            readonly,
    }
    
    ///  <remarks/>
    
    
    export enum ObjectMode {

        none,

        template,

        element,

        NMS,
    }
    
    ///  <remarks/>
    
    
    export enum ServiceInterruption {

        none,

        interruption,

        reset,
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class MibxContainer extends MibxObject {

        private itemsField: MibxItem[];
        
        ///  <remarks/>




        public get Items(): MibxItem[] {
            return this.itemsField;
        }




        public set Items(value: MibxItem[]) {
            this.itemsField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Node extends MibxContainer {

        private importedField: boolean;

        private importedMibNameField: string;

        public constructor() {
            super();
            this.importedField = false;
        }
        
        ///  <remarks/>
        
        
        public get Imported(): boolean {
            return this.importedField;
        }
        
        
        public set Imported(value: boolean) {
            this.importedField = value;

        }
        
        ///  <remarks/>
        
        public get ImportedMibName(): string {
            return this.importedMibNameField;
        }
        
        public set ImportedMibName(value: string) {
            this.importedMibNameField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Param extends MibxObject {

        private limitsField: Limits;

        private upgradeField: Upgrade;

        private typeField: Type;

        private defaultField: string;

        private flashOffseetField: string;

        private unitsField: Units;

        private usageField: ParamUsage;

        private nonDuplicatableField: boolean;

        private allowSuggestedValueField: boolean;

        private allowSuggestedValueOnValueChangedField: boolean;

        private allowPossibleValuesField: boolean;

        private allowMultipleEditField: boolean;

        private startsProcessField: boolean;

        private uniqueField: boolean;

        private searchableField: boolean;

        private messageOnChangeField: string;

        public constructor() {
            super();
            this.unitsField = Units.Empty;
            this.usageField = ParamUsage.none;
            this.nonDuplicatableField = false;
            this.allowSuggestedValueField = false;
            this.allowSuggestedValueOnValueChangedField = false;
            this.allowPossibleValuesField = false;
            this.allowMultipleEditField = false;
            this.startsProcessField = false;
            this.uniqueField = false;
            this.searchableField = false;
        }
        
        ///  <remarks/>
        public get Limits(): Limits {
            return this.limitsField;
        }
        public set Limits(value: Limits) {
            this.limitsField = value;

        }
        
        ///  <remarks/>
        public get Upgrade(): Upgrade {
            return this.upgradeField;
        }
        public set Upgrade(value: Upgrade) {
            this.upgradeField = value;

        }
        
        ///  <remarks/>
        
        public get Type(): Type {
            return this.typeField;
        }
        
        public set Type(value: Type) {
            this.typeField = value;

        }
        
        ///  <remarks/>
        
        public get Default(): string {
            return this.defaultField;
        }
        
        public set Default(value: string) {
            this.defaultField = value;

        }
        
        ///  <remarks/>
        
        public get FlashOffseet(): string {
            return this.flashOffseetField;
        }
        
        public set FlashOffseet(value: string) {
            this.flashOffseetField = value;

        }
        
        ///  <remarks/>
        

        public get Units(): Units {
            return this.unitsField;
        }
        

        public set Units(value: Units) {
            this.unitsField = value;

        }
        
        ///  <remarks/>
        

        public get Usage(): ParamUsage {
            return this.usageField;
        }
        

        public set Usage(value: ParamUsage) {
            this.usageField = value;

        }
        
        ///  <remarks/>
        
        
        public get NonDuplicatable(): boolean {
            return this.nonDuplicatableField;
        }
        
        
        public set NonDuplicatable(value: boolean) {
            this.nonDuplicatableField = value;

        }
        
        ///  <remarks/>
        
        
        public get AllowSuggestedValue(): boolean {
            return this.allowSuggestedValueField;
        }
        
        
        public set AllowSuggestedValue(value: boolean) {
            this.allowSuggestedValueField = value;

        }
        
        ///  <remarks/>
        
        
        public get AllowSuggestedValueOnValueChanged(): boolean {
            return this.allowSuggestedValueOnValueChangedField;
        }
        
        
        public set AllowSuggestedValueOnValueChanged(value: boolean) {
            this.allowSuggestedValueOnValueChangedField = value;

        }
        
        ///  <remarks/>
        
        
        public get AllowPossibleValues(): boolean {
            return this.allowPossibleValuesField;
        }
        
        
        public set AllowPossibleValues(value: boolean) {
            this.allowPossibleValuesField = value;

        }
        
        ///  <remarks/>
        
        
        public get AllowMultipleEdit(): boolean {
            return this.allowMultipleEditField;
        }
        
        
        public set AllowMultipleEdit(value: boolean) {
            this.allowMultipleEditField = value;

        }
        
        ///  <remarks/>
        
        
        public get StartsProcess(): boolean {
            return this.startsProcessField;
        }
        
        
        public set StartsProcess(value: boolean) {
            this.startsProcessField = value;

        }
        
        ///  <remarks/>
        
        
        public get Unique(): boolean {
            return this.uniqueField;
        }
        
        
        public set Unique(value: boolean) {
            this.uniqueField = value;

        }
        
        ///  <remarks/>
        
        
        public get Searchable(): boolean {
            return this.searchableField;
        }
        
        
        public set Searchable(value: boolean) {
            this.searchableField = value;

        }
        
        ///  <remarks/>
        
        public get MessageOnChange(): string {
            return this.messageOnChangeField;
        }
        
        public set MessageOnChange(value: string) {
            this.messageOnChangeField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Limits extends GeminiObject {

        private itemsField: RangeBase[];

        private regExField: string;
        
        ///  <remarks/>



        public get Items(): RangeBase[] {
            return this.itemsField;
        }



        public set Items(value: RangeBase[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>
        public get RegEx(): string {
            return this.regExField;
        }
        public set RegEx(value: string) {
            this.regExField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Enum extends EnumBase {

        private nameField: string;
        
        ///  <remarks/>

        public get Name(): string {
            return this.nameField;
        }

        public set Name(value: string) {
            this.nameField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Range extends RangeBase {
    }
    
    ///  <remarks/>
    
    
    
    export class StrLen extends RangeBase {
    }
    
    ///  <remarks/>
    
    
    
    export class Upgrade extends GeminiObject {

        private defaultField: DefaultUpgrade;

        private convertField: string;

        public constructor() {
            super();
            this.defaultField = DefaultUpgrade.none;
        }
        
        ///  <remarks/>
        

        public get Default(): DefaultUpgrade {
            return this.defaultField;
        }
        

        public set Default(value: DefaultUpgrade) {
            this.defaultField = value;

        }
        
        ///  <remarks/>
        
        public get Convert(): string {
            return this.convertField;
        }
        
        public set Convert(value: string) {
            this.convertField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum DefaultUpgrade {

        none,



        overwriteunchanged,

        overwrite,
    }
    
    ///  <remarks/>
    
    
    export enum Type {

        String,

        Bool,

        OID,

        Int32Bits,

        Int8,

        UInt8,

        Int16,

        UInt16,

        Int32,

        UInt32,

        Int64,

        UInt64,

        Float,

        Double,

        DateTime,

        Date,

        Time,

        TimeTicks,

        MAC,

        IPv4,

      

        IPv4Hex,

       

        IPv4Multicast,

      

        IPv4MulticastHex,

     

        IPv4Unicast,

      

        IPv4UnicastHex,

        IPv6,

      

        IPv6PrefixLength,

        RowStatus,

        Complex,

      

        SubnetMask,

        File,
    }
    
    ///  <remarks/>
    
    
    export enum ParamUsage {

        none,

        config,
    }
    
    ///  <remarks/>
    
    
    
    export class Table extends MibxContainer {

        private tableDefField: TableDef;

        private rowDefaultsField: RowDefaultsRow[];

        private minRowsField: number;

        private maxRowsField: number;

        private maxRowsFieldSpecified: boolean;

        private rowsAuthField: AccessLevel;

        private usageField: ParamUsage;

        public constructor() {
            super();
            this.minRowsField = 0;
            this.rowsAuthField = AccessLevel.admin;
            this.usageField = ParamUsage.none;
        }
        
        ///  <remarks/>
        public get TableDef(): TableDef {
            return this.tableDefField;
        }
        public set TableDef(value: TableDef) {
            this.tableDefField = value;

        }
        
        ///  <remarks/>

        public get RowDefaults(): RowDefaultsRow[] {
            return this.rowDefaultsField;
        }

        public set RowDefaults(value: RowDefaultsRow[]) {
            this.rowDefaultsField = value;

        }
        
        ///  <remarks/>
        
        
        public get MinRows(): number {
            return this.minRowsField;
        }
        
        
        public set MinRows(value: number) {
            this.minRowsField = value;

        }
        
        ///  <remarks/>
        
        public get MaxRows(): number {
            return this.maxRowsField;
        }
        
        public set MaxRows(value: number) {
            this.maxRowsField = value;

        }
        
        ///  <remarks/>
        
        public get MaxRowsSpecified(): boolean {
            return this.maxRowsFieldSpecified;
        }
        
        public set MaxRowsSpecified(value: boolean) {
            this.maxRowsFieldSpecified = value;

        }
        
        ///  <remarks/>
        

        public get RowsAuth(): AccessLevel {
            return this.rowsAuthField;
        }
        

        public set RowsAuth(value: AccessLevel) {
            this.rowsAuthField = value;

        }
        
        ///  <remarks/>
        

        public get Usage(): ParamUsage {
            return this.usageField;
        }
        

        public set Usage(value: ParamUsage) {
            this.usageField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class TableDef extends GeminiObject {

        private itemsField: string[];

        private itemsElementNameField: ItemsChoiceType[];
        
        ///  <remarks/>




        public get Items(): string[] {
            return this.itemsField;
        }




        public set Items(value: string[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>

        
        public get ItemsElementName(): ItemsChoiceType[] {
            return this.itemsElementNameField;
        }

        
        public set ItemsElementName(value: ItemsChoiceType[]) {
            this.itemsElementNameField = value;

        }
    }
    
    ///  <remarks/>
   
    export enum ItemsChoiceType {

        Augments,

        Index,

        RowStatus,
    }
    
    ///  <remarks/>
    
    
    export class RowDefaultsRow extends GeminiObject {

        private columnDefaultField: ColumnDefault[];

        private indexValueField: string;
        
        ///  <remarks/>

        public get ColumnDefault(): ColumnDefault[] {
            return this.columnDefaultField;
        }

        public set ColumnDefault(value: ColumnDefault[]) {
            this.columnDefaultField = value;

        }
        
        ///  <remarks/>
        
        public get IndexValue(): string {
            return this.indexValueField;
        }
        
        public set IndexValue(value: string) {
            this.indexValueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class ColumnDefault extends GeminiObject {

        private uIDField: string;

        private valueField: string;
        
        ///  <remarks/>
        
        public get UID(): string {
            return this.uIDField;
        }
        
        public set UID(value: string) {
            this.uIDField = value;

        }
        
        ///  <remarks/>
        
        public get Value(): string {
            return this.valueField;
        }
        
        public set Value(value: string) {
            this.valueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Trap extends MibxItem {

        private objectField: string[];

        private trapMappingField: TrapMapping[];
        
        ///  <remarks/>

        public get Object(): string[] {
            return this.objectField;
        }

        public set Object(value: string[]) {
            this.objectField = value;

        }
        
        ///  <remarks/>

        public get TrapMapping(): TrapMapping[] {
            return this.trapMappingField;
        }

        public set TrapMapping(value: TrapMapping[]) {
            this.trapMappingField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class TrapMapping extends GeminiObject {

        private itemField: Object;

        private eventAttrField: EventAttributes;

        private mapField: EventAttrMaps;

        private valueField: string;
        
        ///  <remarks/>


        public get Item(): Object {
            return this.itemField;
        }


        public set Item(value: Object) {
            this.itemField = value;

        }
        
        ///  <remarks/>
        
        public get EventAttr(): EventAttributes {
            return this.eventAttrField;
        }
        
        public set EventAttr(value: EventAttributes) {
            this.eventAttrField = value;

        }
        
        ///  <remarks/>
        
        public get Map(): EventAttrMaps {
            return this.mapField;
        }
        
        public set Map(value: EventAttrMaps) {
            this.mapField = value;

        }
        
        ///  <remarks/>
        
        public get Value(): string {
            return this.valueField;
        }
        
        public set Value(value: string) {
            this.valueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum EventAttributes {

        id,

        sequence,

        status,

        param,

        version,

        SubModule,

        SubModuleInstance,
    }
    
    ///  <remarks/>
    
    
    export enum EventAttrMaps {

        absolute,

        lookup,

        GetValue,

        position,

        replace,
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class CommandBase extends UniqueItem {

        private descriptionField: string;

        private actionField: string;

        private parametersField: string[];
        
        ///  <remarks/>

        public get Description(): string {
            return this.descriptionField;
        }

        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>
        public get Action(): string {
            return this.actionField;
        }
        public set Action(value: string) {
            this.actionField = value;

        }
        
        ///  <remarks/>

        public get Parameters(): string[] {
            return this.parametersField;
        }

        public set Parameters(value: string[]) {
            this.parametersField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class PrototypeLink extends LinkBase {
    }
    
    ///  <remarks/>
    
    
    
    export class Links extends GeminiObject {

        private prototypeLinkField: PrototypeLink[];

        private singletonLinkField: SingletonLink[];
        
        ///  <remarks/>

        public get PrototypeLink(): PrototypeLink[] {
            return this.prototypeLinkField;
        }

        public set PrototypeLink(value: PrototypeLink[]) {
            this.prototypeLinkField = value;

        }
        
        ///  <remarks/>

        public get SingletonLink(): SingletonLink[] {
            return this.singletonLinkField;
        }

        public set SingletonLink(value: SingletonLink[]) {
            this.singletonLinkField = value;

        }
    }
    
    ///  <remarks/>  
    
    
    
    export class UniqueLink extends UniqueItem {

        private componentField: string;

        private versionField: string;
        
        ///  <remarks/>
        
        public get Component(): string {
            return this.componentField;
        }
        
        public set Component(value: string) {
            this.componentField = value;

        }
        
        ///  <remarks/>
        
        public get Version(): string {
            return this.versionField;
        }
        
        public set Version(value: string) {
            this.versionField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class CollectionUniqueLink extends UniqueLink {
    }
    
    ///  <remarks/>
    
    
    
    export class Licenses extends GeminiObject {

        private licenseField: License[];
        
        ///  <remarks/>

        public get License(): License[] {
            return this.licenseField;
        }

        public set License(value: License[]) {
            this.licenseField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class License extends GeminiObject {

        private codeField: string;

        private descriptionField: string;

        private maxField: number;

        private extentField: number;

        public constructor() {
            super();
            this.maxField = 1;
            this.extentField = 1;
        }
        
        ///  <remarks/>
        
        public get Code(): string {
            return this.codeField;
        }
        
        public set Code(value: string) {
            this.codeField = value;

        }
        
        ///  <remarks/>
        
        public get Description(): string {
            return this.descriptionField;
        }
        
        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>
        
        
        public get Max(): number {
            return this.maxField;
        }
        
        
        public set Max(value: number) {
            this.maxField = value;

        }
        
        ///  <remarks/>
        
        
        public get Extent(): number {
            return this.extentField;
        }
        
        
        public set Extent(value: number) {
            this.extentField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Command extends CommandBase {
    }
    
    ///  <remarks/>
    
    
    export class Commands1 extends CommandsContainer {
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class CommandsContainer extends GeminiObject {

        private itemsField: Command[];
        
        ///  <remarks/>

        public get Items(): Command[] {
            return this.itemsField;
        }

        public set Items(value: Command[]) {
            this.itemsField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Module extends MibxContainer {
    }
    
    ///  <remarks/>
    
    
    
    export class RowDefaults extends GeminiObject {

        private rowField: RowDefaultsRow[];
        
        ///  <remarks/>

        public get Row(): RowDefaultsRow[] {
            return this.rowField;
        }

        public set Row(value: RowDefaultsRow[]) {
            this.rowField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class SNMPHealthOid extends GeminiObject {

        private oidField: string;
        
        ///  <remarks/>
        
        public get Oid(): string {
            return this.oidField;
        }
        
        public set Oid(value: string) {
            this.oidField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class SNMPHealthRule extends HealthRule {

        private sNMPHealthOidField: SNMPHealthOid[];

        private trapMappingField: TrapMapping[];
        
        ///  <remarks/>

        public get SNMPHealthOid(): SNMPHealthOid[] {
            return this.sNMPHealthOidField;
        }

        public set SNMPHealthOid(value: SNMPHealthOid[]) {
            this.sNMPHealthOidField = value;

        }
        
        ///  <remarks/>

        public get TrapMapping(): TrapMapping[] {
            return this.trapMappingField;
        }

        public set TrapMapping(value: TrapMapping[]) {
            this.trapMappingField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class PingHealthRule extends HealthRule {
    }
    
    ///  <remarks/>
    
    
    
    export class Health extends GeminiObject {

        private sNMPHealthRuleField: SNMPHealthRule[];

        private pingHealthRuleField: PingHealthRule[];
        
        ///  <remarks/>

        public get SNMPHealthRule(): SNMPHealthRule[] {
            return this.sNMPHealthRuleField;
        }

        public set SNMPHealthRule(value: SNMPHealthRule[]) {
            this.sNMPHealthRuleField = value;

        }
        
        ///  <remarks/>

        public get PingHealthRule(): PingHealthRule[] {
            return this.pingHealthRuleField;
        }

        public set PingHealthRule(value: PingHealthRule[]) {
            this.pingHealthRuleField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Event extends EventBase {
    }
    
    ///  <remarks/>
    
    
    
    export class Alarm extends EventBase {
    }
    
    ///  <remarks/>
    
    
    
    export class Alarms extends EventBaseContainer {
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class EventBaseContainer extends GeminiObject {

        private itemsField: EventBase[];
        
        ///  <remarks/>


        public get Items(): EventBase[] {
            return this.itemsField;
        }


        public set Items(value: EventBase[]) {
            this.itemsField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Events extends EventBaseContainer {
    }
    
    ///  <remarks/>
    
    
    
    export class Mibx extends GeminiObject {

        private linksField: Links;

        private licensesField: License[];

        private healthField: Health;

        private eventsField: Events;

        private alarmsField: Alarms;

        private commandsField: Commands1;

        private moduleField: Module;

        private schemaField: string;
        
        ///  <remarks/>

        public get Links(): Links {
            return this.linksField;
        }

        public set Links(value: Links) {
            this.linksField = value;

        }
        
        ///  <remarks/>


        public get Licenses(): License[] {
            return this.licensesField;
        }


        public set Licenses(value: License[]) {
            this.licensesField = value;

        }
        
        ///  <remarks/>
        public get Health(): Health {
            return this.healthField;
        }
        public set Health(value: Health) {
            this.healthField = value;

        }
        
        ///  <remarks/>
        public get Events(): Events {
            return this.eventsField;
        }
        public set Events(value: Events) {
            this.eventsField = value;

        }
        
        ///  <remarks/>
        public get Alarms(): Alarms {
            return this.alarmsField;
        }
        public set Alarms(value: Alarms) {
            this.alarmsField = value;

        }
        
        ///  <remarks/>
        public get Commands(): Commands1 {
            return this.commandsField;
        }
        public set Commands(value: Commands1) {
            this.commandsField = value;

        }
        
        ///  <remarks/>
        public get Module(): Module {
            return this.moduleField;
        }
        public set Module(value: Module) {
            this.moduleField = value;

        }
        
        ///  <remarks/>

        public get Schema(): string {
            return this.schemaField;
        }

        public set Schema(value: string) {
            this.schemaField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixSection extends UniqueItem {

        private itemsField: Object[];

        private dependenciesField: GuixDependencies;

        private showTitleField: boolean;

        private isExpandedField: boolean;

        private uIAccessLevelField: UIAccessLevel;

        public constructor() {
            super();
            this.showTitleField = true;
            this.isExpandedField = true;
            this.uIAccessLevelField = UIAccessLevel.normal;
        }
        
        ///  <remarks/>

        
        
        public get Items(): Object[] {
            return this.itemsField;
        }

        
        
        public set Items(value: Object[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>
        public get Dependencies(): GuixDependencies {
            return this.dependenciesField;
        }
        public set Dependencies(value: GuixDependencies) {
            this.dependenciesField = value;

        }
        
        ///  <remarks/>
        

        public get ShowTitle(): boolean {
            return this.showTitleField;
        }
        

        public set ShowTitle(value: boolean) {
            this.showTitleField = value;

        }
        
        ///  <remarks/>
        

        public get IsExpanded(): boolean {
            return this.isExpandedField;
        }
        

        public set IsExpanded(value: boolean) {
            this.isExpandedField = value;

        }
        
        ///  <remarks/>
        

        public get UIAccessLevel(): UIAccessLevel {
            return this.uIAccessLevelField;
        }
        

        public set UIAccessLevel(value: UIAccessLevel) {
            this.uIAccessLevelField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export class GuixDependencies extends DependenciesBase {

        private inactiveDependencyField: GuixInactiveDependency[];
        
        ///  <remarks/>

        public get InactiveDependency(): GuixInactiveDependency[] {
            return this.inactiveDependencyField;
        }

        public set InactiveDependency(value: GuixInactiveDependency[]) {
            this.inactiveDependencyField = value;

        }
    }
    
    ///  <remarks/>    
    
    
    export /* abstract */ class DependenciesBase extends GeminiObject {
    }
    
    ///  <remarks/>
    
    
    
    export class LinkedGuixNode extends GeminiObject {

        private nodeUIDField: string;
        
        ///  <remarks/>
        
        public get NodeUID(): string {
            return this.nodeUIDField;
        }
        
        public set NodeUID(value: string) {
            this.nodeUIDField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class GuixNode extends UniqueItem {

        private itemsField: Object[];

        private guixSectionField: GuixSection[];

        private dependenciesField: GuixDependencies;

        private autoRefreshIntervalField: number;

        private uIAccessLevelField: UIAccessLevel;

        private isInfoField: boolean;

        public constructor() {
            super();
            this.autoRefreshIntervalField = 15;
            this.uIAccessLevelField = UIAccessLevel.normal;
            this.isInfoField = false;
        }
        
        ///  <remarks/>


        public get Items(): Object[] {
            return this.itemsField;
        }


        public set Items(value: Object[]) {
            this.itemsField = value;

        }
        
        ///  <remarks/>

        public get GuixSection(): GuixSection[] {
            return this.guixSectionField;
        }

        public set GuixSection(value: GuixSection[]) {
            this.guixSectionField = value;

        }
        
        ///  <remarks/>
        public get Dependencies(): GuixDependencies {
            return this.dependenciesField;
        }
        public set Dependencies(value: GuixDependencies) {
            this.dependenciesField = value;

        }
        
        ///  <remarks/>
        

        public get AutoRefreshInterval(): number {
            return this.autoRefreshIntervalField;
        }
        

        public set AutoRefreshInterval(value: number) {
            this.autoRefreshIntervalField = value;

        }
        
        ///  <remarks/>
        

        public get UIAccessLevel(): UIAccessLevel {
            return this.uIAccessLevelField;
        }
        

        public set UIAccessLevel(value: UIAccessLevel) {
            this.uIAccessLevelField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsInfo(): boolean {
            return this.isInfoField;
        }
        
        
        public set IsInfo(value: boolean) {
            this.isInfoField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Configuration extends GuixContainer {
    }
    
    ///  <remarks/>
    
    
    export /* abstract */ class GuixContainer extends GeminiObject {

        private itemsField: Object[];
        
        ///  <remarks/>


        public get Items(): Object[] {
            return this.itemsField;
        }


        public set Items(value: Object[]) {
            this.itemsField = value;

        }
    }
    
    ///  <remarks/>
    
    
    
    export class Telemetries extends GuixContainer {
    }
    
    ///  <remarks/>
    
    
    
    export class Guix extends GeminiObject {

        private configurationField: Configuration;

        private telemetriesField: Telemetries;

        private commandsField: Commands;

        private schemaField: string;
        
        ///  <remarks/>
        public get Configuration(): Configuration {
            return this.configurationField;
        }
        public set Configuration(value: Configuration) {
            this.configurationField = value;

        }
        
        ///  <remarks/>
        public get Telemetries(): Telemetries {
            return this.telemetriesField;
        }
        public set Telemetries(value: Telemetries) {
            this.telemetriesField = value;

        }
        
        ///  <remarks/>
        public get Commands(): Commands {
            return this.commandsField;
        }
        public set Commands(value: Commands) {
            this.commandsField = value;

        }
        
        ///  <remarks/>

        public get Schema(): string {
            return this.schemaField;
        }

        public set Schema(value: string) {
            this.schemaField = value;

        }
    }
    
    ///  <remarks/>
        
    export class Reports extends GeminiObject {

        private reportField: Report[];

        private schemaField: string;
        
        ///  <remarks/>

        public get Report(): Report[] {
            return this.reportField;
        }

        public set Report(value: Report[]) {
            this.reportField = value;

        }
        
        ///  <remarks/>

        public get Schema(): string {
            return this.schemaField;
        }

        public set Schema(value: string) {
            this.schemaField = value;

        }
    }
    
    ///  <remarks/>
        
    export class Report extends UniqueItem {

        private seriesField: Series[];

        private supportedReportViewTypeField: ReportViewTypes[];

        private relatedReportField: RelatedReport[];

        private drillDownReportField: string[];

        private navigationCategoryField: NavigationCategories[];

        private disabledNavigationCategoryField: NavigationCategories[];

        private disabledResolutionField: Resolutions[];

        private flagField: Flag[];

        private helpUrlField: string;

        private mandatoryField: boolean;

        private reportTabField: ReportTabs;

        private showOnOverviewField: boolean;

        private orderInOverviewField: number;

        private showOnCageViewField: boolean;

        private orderInCageViewField: number;

        private defaultReportViewTypeField: ReportViewTypes;

        private barFunctionField: BarFunctions;

        private axisXTitleField: string;

        private axisYTitleField: string;

        private axisXTypeField: AxisXTypes;

        private descriptionField: string;

        private aggregationMethodField: RepAggregationMethod;

        public constructor() {
            super();
            this.mandatoryField = false;
            this.showOnOverviewField = false;
            this.orderInOverviewField = (<number>(0));
            this.showOnCageViewField = false;
            this.orderInCageViewField = (<number>(0));
            this.defaultReportViewTypeField = ReportViewTypes.Line;
            this.barFunctionField = BarFunctions.None;
            this.axisXTypeField = AxisXTypes.DateTime;
            this.aggregationMethodField = RepAggregationMethod.OnNSs;
        }
        
        ///  <remarks/>

        public get Series(): Series[] {
            return this.seriesField;
        }

        public set Series(value: Series[]) {
            this.seriesField = value;

        }
        
        ///  <remarks/>

        public get SupportedReportViewType(): ReportViewTypes[] {
            return this.supportedReportViewTypeField;
        }

        public set SupportedReportViewType(value: ReportViewTypes[]) {
            this.supportedReportViewTypeField = value;

        }
        
        ///  <remarks/>

        public get RelatedReport(): RelatedReport[] {
            return this.relatedReportField;
        }

        public set RelatedReport(value: RelatedReport[]) {
            this.relatedReportField = value;

        }
        
        ///  <remarks/>

        public get DrillDownReport(): string[] {
            return this.drillDownReportField;
        }

        public set DrillDownReport(value: string[]) {
            this.drillDownReportField = value;

        }
        
        ///  <remarks/>

        public get NavigationCategory(): NavigationCategories[] {
            return this.navigationCategoryField;
        }

        public set NavigationCategory(value: NavigationCategories[]) {
            this.navigationCategoryField = value;

        }
        
        ///  <remarks/>

        public get DisabledNavigationCategory(): NavigationCategories[] {
            return this.disabledNavigationCategoryField;
        }

        public set DisabledNavigationCategory(value: NavigationCategories[]) {
            this.disabledNavigationCategoryField = value;

        }
        
        ///  <remarks/>

        public get DisabledResolution(): Resolutions[] {
            return this.disabledResolutionField;
        }

        public set DisabledResolution(value: Resolutions[]) {
            this.disabledResolutionField = value;

        }
        
        ///  <remarks/>

        public get Flag(): Flag[] {
            return this.flagField;
        }

        public set Flag(value: Flag[]) {
            this.flagField = value;

        }
        
        ///  <remarks/>
        
        public get HelpUrl(): string {
            return this.helpUrlField;
        }
        
        public set HelpUrl(value: string) {
            this.helpUrlField = value;

        }
        
        ///  <remarks/>
        
        
        public get Mandatory(): boolean {
            return this.mandatoryField;
        }
        
        
        public set Mandatory(value: boolean) {
            this.mandatoryField = value;

        }
        
        ///  <remarks/>
        
        public get ReportTab(): ReportTabs {
            return this.reportTabField;
        }
        
        public set ReportTab(value: ReportTabs) {
            this.reportTabField = value;

        }
        
        ///  <remarks/>
        
        
        public get ShowOnOverview(): boolean {
            return this.showOnOverviewField;
        }
        
        
        public set ShowOnOverview(value: boolean) {
            this.showOnOverviewField = value;

        }
        
        ///  <remarks/>
        

        public get OrderInOverview(): number {
            return this.orderInOverviewField;
        }
        

        public set OrderInOverview(value: number) {
            this.orderInOverviewField = value;

        }
        
        ///  <remarks/>
        
        
        public get ShowOnCageView(): boolean {
            return this.showOnCageViewField;
        }
        
        
        public set ShowOnCageView(value: boolean) {
            this.showOnCageViewField = value;

        }
        
        ///  <remarks/>
        

        public get OrderInCageView(): number {
            return this.orderInCageViewField;
        }
        

        public set OrderInCageView(value: number) {
            this.orderInCageViewField = value;

        }
        
        ///  <remarks/>
        

        public get DefaultReportViewType(): ReportViewTypes {
            return this.defaultReportViewTypeField;
        }
        

        public set DefaultReportViewType(value: ReportViewTypes) {
            this.defaultReportViewTypeField = value;

        }
        
        ///  <remarks/>
        

        public get BarFunction(): BarFunctions {
            return this.barFunctionField;
        }
        

        public set BarFunction(value: BarFunctions) {
            this.barFunctionField = value;

        }
        
        ///  <remarks/>
        
        public get AxisXTitle(): string {
            return this.axisXTitleField;
        }
        
        public set AxisXTitle(value: string) {
            this.axisXTitleField = value;

        }
        
        ///  <remarks/>
        
        public get AxisYTitle(): string {
            return this.axisYTitleField;
        }
        
        public set AxisYTitle(value: string) {
            this.axisYTitleField = value;

        }
        
        ///  <remarks/>
        

        public get AxisXType(): AxisXTypes {
            return this.axisXTypeField;
        }
        

        public set AxisXType(value: AxisXTypes) {
            this.axisXTypeField = value;

        }
        
        ///  <remarks/>
        
        public get Description(): string {
            return this.descriptionField;
        }
        
        public set Description(value: string) {
            this.descriptionField = value;

        }
        
        ///  <remarks/>
        

        public get AggregationMethod(): RepAggregationMethod {
            return this.aggregationMethodField;
        }
        

        public set AggregationMethod(value: RepAggregationMethod) {
            this.aggregationMethodField = value;

        }
    }
    
    ///  <remarks/>
        
    export class Series extends GeminiObject {

        private sQLField: SeriesSQL;

        private collectionItemUIDField: string;

        private linkUIDField: string;

        private isThresholdField: boolean;

        private aggTypeField: AggregationTypes;

        public constructor() {
            super();
            this.isThresholdField = false;
            this.aggTypeField = AggregationTypes.Avg;
        }
        
        ///  <remarks/>
        public get SQL(): SeriesSQL {
            return this.sQLField;
        }
        public set SQL(value: SeriesSQL) {
            this.sQLField = value;

        }
        
        ///  <remarks/>
        
        public get CollectionItemUID(): string {
            return this.collectionItemUIDField;
        }
        
        public set CollectionItemUID(value: string) {
            this.collectionItemUIDField = value;

        }
        
        ///  <remarks/>
        
        public get LinkUID(): string {
            return this.linkUIDField;
        }
        
        public set LinkUID(value: string) {
            this.linkUIDField = value;

        }
        
        ///  <remarks/>
        
        
        public get IsThreshold(): boolean {
            return this.isThresholdField;
        }
        
        
        public set IsThreshold(value: boolean) {
            this.isThresholdField = value;

        }
        
        ///  <remarks/>
        

        public get AggType(): AggregationTypes {
            return this.aggTypeField;
        }
        

        public set AggType(value: AggregationTypes) {
            this.aggTypeField = value;

        }
    }
    
    ///  <remarks/>
        
    export class SeriesSQL extends GeminiObject {

        private columnStrField: string;

        private tableNameField: string;
        
        ///  <remarks/>
        
        public get ColumnStr(): string {
            return this.columnStrField;
        }
        
        public set ColumnStr(value: string) {
            this.columnStrField = value;

        }
        
        ///  <remarks/>
        
        public get TableName(): string {
            return this.tableNameField;
        }
        
        public set TableName(value: string) {
            this.tableNameField = value;

        }
    }
    
    ///  <remarks/>
        
    export enum AggregationTypes {

        Avg,

        Sum,
       
        LastSample
    }
    
    ///  <remarks/>
    
    
    export enum ReportViewTypes {

        Line,

        Bar,

        Pie,

        Area,

        Table,
    }
    
    ///  <remarks/>
       
    export class RelatedReport extends GeminiObject {

        private reportUIDField: string;

        private showByDefaultField: boolean;

        public constructor() {
            super();
            this.showByDefaultField = false;
        }
        
        ///  <remarks/>
        
        public get ReportUID(): string {
            return this.reportUIDField;
        }
        
        public set ReportUID(value: string) {
            this.reportUIDField = value;

        }
        
        ///  <remarks/>
        
        
        public get ShowByDefault(): boolean {
            return this.showByDefaultField;
        }
        
        
        public set ShowByDefault(value: boolean) {
            this.showByDefaultField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum NavigationCategories {

        ManagedGroup,

        ManagedGroups,

        CPEGroup,

        Teleport,

        RFCluster,

        NetworkSegment,

        MasterNetworkSegment,

        SlaveNetworkSegment,

        NetworkSegmentController,

        HSP,

        DPS,

        IPM,

        CPE,

        MCR,

        Satellite,

        Network,

        ALC,

        SCPC,

        MCPC,

        Modulator,

        Demodulator,

        GLT,

        MLT,

        SatTrooper,

        CCD,
    }
    
    ///  <remarks/>
    
    
    export enum Resolutions {



        FiveMinutes,



        OneHour,



        OneDay,



        OneWeek,



        OneMonth


    }
    
    ///  <remarks/>
    
    
    export class Flag extends GeminiObject {

        private valueField: number;
        
        ///  <remarks/>
        
        public get Value(): number {
            return this.valueField;
        }
        
        public set Value(value: number) {
            this.valueField = value;

        }
    }
    
    ///  <remarks/>
    
    
    export enum ReportTabs {


        Traffic,


        Performance,


        Advanced,
    }
    
    ///  <remarks/>
    
    
    export enum BarFunctions {

        None,

        AvgRound,

        AvgTrunc,

        Avg,

        MinMaxAvg,
    }
    
    ///  <remarks/>
    
    
    export enum AxisXTypes {

        DateTime,

        String,

        Integer,
    }
    
    ///  <remarks/>
    
    
    export enum RepAggregationMethod {

        OnNSs,

        OnNSByInstance,

        OnNSByNE,

        OnMGByNS,

        ONMG,

        OnMGByInstance,

        OnRFCByNS,
    }
}

